// tslint:disable
/**
 * OpenApi Juwelo documentation
 * Specs for microservices: SystemController,SessionController,LoginController,UserController,WebSocketController,DebugNotificationController
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: development@juwelo.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AppliedPasswordResetDTO,
    CredentialsDTO,
    EntityAttributeAccessDTO,
    GroupDTO,
    PasswordResetDTO,
    PropertyDTO,
    UserDTO,
    UserRightsDTO,
} from '../models';

export interface CreateUserRequest {
    userDTO?: UserDTO;
}

export interface DeleteUserRequest {
    login: string;
    userDTO?: UserDTO;
}

export interface DeleteUserEntityAttributeAccessRequest {
    userName: string;
    entity: string;
    attribute: string;
    entityAttributeAccessDTO?: EntityAttributeAccessDTO;
}

export interface GetAllUsersRequest {
    filter?: string;
}

export interface GetAppPropertiesRequest {
    login: string;
    appName: string;
}

export interface GetGroupsOfUserRequest {
    login: string;
}

export interface GetUserRequest {
    login: string;
}

export interface GetUserEntityAttributeAccessesRequest {
    userName: string;
}

export interface GetUserRightsRequest {
    login: string;
    filter?: string;
}

export interface ResetPasswordRequest {
    login: string;
    passwordResetDTO?: PasswordResetDTO;
}

export interface SetPasswordRequest {
    userId: string;
    credentialsDTO?: CredentialsDTO;
}

export interface SetUserEntityAttributeAccessRequest {
    userName: string;
    entityAttributeAccessDTO?: EntityAttributeAccessDTO;
}

export interface UpdateUserRequest {
    login: string;
    userDTO?: UserDTO;
}

/**
 * no description
 */
export class UserControllerApi extends BaseAPI {

    /**
     * ---there is no description defined---
     * createUser
     */
    createUser({ userDTO }: CreateUserRequest): Observable<void>
    createUser({ userDTO }: CreateUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    createUser({ userDTO }: CreateUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/user',
            method: 'POST',
            headers,
            body: userDTO,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * deleteUser
     */
    deleteUser({ login, userDTO }: DeleteUserRequest): Observable<void>
    deleteUser({ login, userDTO }: DeleteUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteUser({ login, userDTO }: DeleteUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(login, 'login', 'deleteUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/user/{login}'.replace('{login}', encodeURI(login)),
            method: 'DELETE',
            headers,
            body: userDTO,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * deleteUserEntityAttributeAccess
     */
    deleteUserEntityAttributeAccess({ userName, entity, attribute, entityAttributeAccessDTO }: DeleteUserEntityAttributeAccessRequest): Observable<void>
    deleteUserEntityAttributeAccess({ userName, entity, attribute, entityAttributeAccessDTO }: DeleteUserEntityAttributeAccessRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteUserEntityAttributeAccess({ userName, entity, attribute, entityAttributeAccessDTO }: DeleteUserEntityAttributeAccessRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userName, 'userName', 'deleteUserEntityAttributeAccess');
        throwIfNullOrUndefined(entity, 'entity', 'deleteUserEntityAttributeAccess');
        throwIfNullOrUndefined(attribute, 'attribute', 'deleteUserEntityAttributeAccess');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/user/{userName}/entityAttributeAccess/{entity}/{attribute}'.replace('{userName}', encodeURI(userName)).replace('{entity}', encodeURI(entity)).replace('{attribute}', encodeURI(attribute)),
            method: 'DELETE',
            headers,
            body: entityAttributeAccessDTO,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * getAllUsers
     */
    getAllUsers({ filter }: GetAllUsersRequest): Observable<Array<UserDTO>>
    getAllUsers({ filter }: GetAllUsersRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UserDTO>>>
    getAllUsers({ filter }: GetAllUsersRequest, opts?: OperationOpts): Observable<Array<UserDTO> | AjaxResponse<Array<UserDTO>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (filter != null) { query['filter'] = filter; }

        return this.request<Array<UserDTO>>({
            url: '/users',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * getAppProperties
     */
    getAppProperties({ login, appName }: GetAppPropertiesRequest): Observable<Array<PropertyDTO>>
    getAppProperties({ login, appName }: GetAppPropertiesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PropertyDTO>>>
    getAppProperties({ login, appName }: GetAppPropertiesRequest, opts?: OperationOpts): Observable<Array<PropertyDTO> | AjaxResponse<Array<PropertyDTO>>> {
        throwIfNullOrUndefined(login, 'login', 'getAppProperties');
        throwIfNullOrUndefined(appName, 'appName', 'getAppProperties');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<Array<PropertyDTO>>({
            url: '/user/{login}/app/{appName}/properties'.replace('{login}', encodeURI(login)).replace('{appName}', encodeURI(appName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * getGroupsOfUser
     */
    getGroupsOfUser({ login }: GetGroupsOfUserRequest): Observable<Array<GroupDTO>>
    getGroupsOfUser({ login }: GetGroupsOfUserRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<GroupDTO>>>
    getGroupsOfUser({ login }: GetGroupsOfUserRequest, opts?: OperationOpts): Observable<Array<GroupDTO> | AjaxResponse<Array<GroupDTO>>> {
        throwIfNullOrUndefined(login, 'login', 'getGroupsOfUser');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<Array<GroupDTO>>({
            url: '/user/{login}/groups'.replace('{login}', encodeURI(login)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * getUser
     */
    getUser({ login }: GetUserRequest): Observable<UserDTO>
    getUser({ login }: GetUserRequest, opts?: OperationOpts): Observable<AjaxResponse<UserDTO>>
    getUser({ login }: GetUserRequest, opts?: OperationOpts): Observable<UserDTO | AjaxResponse<UserDTO>> {
        throwIfNullOrUndefined(login, 'login', 'getUser');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<UserDTO>({
            url: '/user/{login}'.replace('{login}', encodeURI(login)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * getUserEntityAttributeAccesses
     */
    getUserEntityAttributeAccesses({ userName }: GetUserEntityAttributeAccessesRequest): Observable<Array<EntityAttributeAccessDTO>>
    getUserEntityAttributeAccesses({ userName }: GetUserEntityAttributeAccessesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<EntityAttributeAccessDTO>>>
    getUserEntityAttributeAccesses({ userName }: GetUserEntityAttributeAccessesRequest, opts?: OperationOpts): Observable<Array<EntityAttributeAccessDTO> | AjaxResponse<Array<EntityAttributeAccessDTO>>> {
        throwIfNullOrUndefined(userName, 'userName', 'getUserEntityAttributeAccesses');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<Array<EntityAttributeAccessDTO>>({
            url: '/user/{userName}/entityAttributeAccesses'.replace('{userName}', encodeURI(userName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * getUserRights
     */
    getUserRights({ login, filter }: GetUserRightsRequest): Observable<UserRightsDTO>
    getUserRights({ login, filter }: GetUserRightsRequest, opts?: OperationOpts): Observable<AjaxResponse<UserRightsDTO>>
    getUserRights({ login, filter }: GetUserRightsRequest, opts?: OperationOpts): Observable<UserRightsDTO | AjaxResponse<UserRightsDTO>> {
        throwIfNullOrUndefined(login, 'login', 'getUserRights');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (filter != null) { query['filter'] = filter; }

        return this.request<UserRightsDTO>({
            url: '/user/{login}/rights'.replace('{login}', encodeURI(login)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * resetPassword
     */
    resetPassword({ login, passwordResetDTO }: ResetPasswordRequest): Observable<AppliedPasswordResetDTO>
    resetPassword({ login, passwordResetDTO }: ResetPasswordRequest, opts?: OperationOpts): Observable<AjaxResponse<AppliedPasswordResetDTO>>
    resetPassword({ login, passwordResetDTO }: ResetPasswordRequest, opts?: OperationOpts): Observable<AppliedPasswordResetDTO | AjaxResponse<AppliedPasswordResetDTO>> {
        throwIfNullOrUndefined(login, 'login', 'resetPassword');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<AppliedPasswordResetDTO>({
            url: '/user/{login}/password'.replace('{login}', encodeURI(login)),
            method: 'PUT',
            headers,
            body: passwordResetDTO,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * setPassword
     */
    setPassword({ userId, credentialsDTO }: SetPasswordRequest): Observable<void>
    setPassword({ userId, credentialsDTO }: SetPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    setPassword({ userId, credentialsDTO }: SetPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userId, 'userId', 'setPassword');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/user/{userId}/password'.replace('{userId}', encodeURI(userId)),
            method: 'POST',
            headers,
            body: credentialsDTO,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * setUserEntityAttributeAccess
     */
    setUserEntityAttributeAccess({ userName, entityAttributeAccessDTO }: SetUserEntityAttributeAccessRequest): Observable<void>
    setUserEntityAttributeAccess({ userName, entityAttributeAccessDTO }: SetUserEntityAttributeAccessRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    setUserEntityAttributeAccess({ userName, entityAttributeAccessDTO }: SetUserEntityAttributeAccessRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userName, 'userName', 'setUserEntityAttributeAccess');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/user/{userName}/entityAttributeAccess'.replace('{userName}', encodeURI(userName)),
            method: 'POST',
            headers,
            body: entityAttributeAccessDTO,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * updateUser
     */
    updateUser({ login, userDTO }: UpdateUserRequest): Observable<void>
    updateUser({ login, userDTO }: UpdateUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    updateUser({ login, userDTO }: UpdateUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(login, 'login', 'updateUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/user/{login}'.replace('{login}', encodeURI(login)),
            method: 'PUT',
            headers,
            body: userDTO,
        }, opts?.responseOpts);
    };

}
