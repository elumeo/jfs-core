// tslint:disable
/**
 * OpenApi Juwelo documentation
 * Specs for microservices: SystemController,SessionController,LoginController,UserController,WebSocketController,DebugNotificationController
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: development@juwelo.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    FrontendSessionDTO,
    SessionDTO,
} from '../models';

export interface GetCurrentSessionFrontendRequest {
    appName: string;
}

export interface LogoutRequest {
    sessionDTO?: SessionDTO;
}

/**
 * no description
 */
export class SessionControllerApi extends BaseAPI {

    /**
     * ---there is no description defined---
     * getCurrentSession
     */
    getCurrentSession(): Observable<SessionDTO>
    getCurrentSession(opts?: OperationOpts): Observable<AjaxResponse<SessionDTO>>
    getCurrentSession(opts?: OperationOpts): Observable<SessionDTO | AjaxResponse<SessionDTO>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<SessionDTO>({
            url: '/session',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * getCurrentSessionFrontend
     */
    getCurrentSessionFrontend({ appName }: GetCurrentSessionFrontendRequest): Observable<FrontendSessionDTO>
    getCurrentSessionFrontend({ appName }: GetCurrentSessionFrontendRequest, opts?: OperationOpts): Observable<AjaxResponse<FrontendSessionDTO>>
    getCurrentSessionFrontend({ appName }: GetCurrentSessionFrontendRequest, opts?: OperationOpts): Observable<FrontendSessionDTO | AjaxResponse<FrontendSessionDTO>> {
        throwIfNullOrUndefined(appName, 'appName', 'getCurrentSessionFrontend');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<FrontendSessionDTO>({
            url: '/session/{appName}'.replace('{appName}', encodeURI(appName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * logout
     */
    logout({ sessionDTO }: LogoutRequest): Observable<void>
    logout({ sessionDTO }: LogoutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    logout({ sessionDTO }: LogoutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/session',
            method: 'DELETE',
            headers,
            body: sessionDTO,
        }, opts?.responseOpts);
    };

}
