// tslint:disable
/**
 * OpenApi Juwelo documentation
 * Specs for microservices: SystemController,SessionController,LoginController,UserController,WebSocketController,DebugNotificationController
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: development@juwelo.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CredentialsDTO,
    FrontendSessionDTO,
    SessionDTO,
} from '../models';

export interface CheckPasswordRulesRequest {
    credentialsDTO?: CredentialsDTO;
}

export interface LoginRequest {
    credentialsDTO?: CredentialsDTO;
}

export interface LoginFrontendRequest {
    appName: string;
    credentialsDTO?: CredentialsDTO;
}

export interface LoginWithoutPasswordRequest {
    credentialsDTO?: CredentialsDTO;
}

/**
 * no description
 */
export class LoginControllerApi extends BaseAPI {

    /**
     * ---there is no description defined---
     * checkPasswordRules
     */
    checkPasswordRules({ credentialsDTO }: CheckPasswordRulesRequest): Observable<void>
    checkPasswordRules({ credentialsDTO }: CheckPasswordRulesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    checkPasswordRules({ credentialsDTO }: CheckPasswordRulesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<void>({
            url: '/user/password/rules',
            method: 'POST',
            headers,
            body: credentialsDTO,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * login
     */
    login({ credentialsDTO }: LoginRequest): Observable<SessionDTO>
    login({ credentialsDTO }: LoginRequest, opts?: OperationOpts): Observable<AjaxResponse<SessionDTO>>
    login({ credentialsDTO }: LoginRequest, opts?: OperationOpts): Observable<SessionDTO | AjaxResponse<SessionDTO>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<SessionDTO>({
            url: '/session',
            method: 'POST',
            headers,
            body: credentialsDTO,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * loginFrontend
     */
    loginFrontend({ appName, credentialsDTO }: LoginFrontendRequest): Observable<FrontendSessionDTO>
    loginFrontend({ appName, credentialsDTO }: LoginFrontendRequest, opts?: OperationOpts): Observable<AjaxResponse<FrontendSessionDTO>>
    loginFrontend({ appName, credentialsDTO }: LoginFrontendRequest, opts?: OperationOpts): Observable<FrontendSessionDTO | AjaxResponse<FrontendSessionDTO>> {
        throwIfNullOrUndefined(appName, 'appName', 'loginFrontend');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<FrontendSessionDTO>({
            url: '/session/{appName}'.replace('{appName}', encodeURI(appName)),
            method: 'POST',
            headers,
            body: credentialsDTO,
        }, opts?.responseOpts);
    };

    /**
     * ---there is no description defined---
     * loginWithoutPassword
     */
    loginWithoutPassword({ credentialsDTO }: LoginWithoutPasswordRequest): Observable<SessionDTO>
    loginWithoutPassword({ credentialsDTO }: LoginWithoutPasswordRequest, opts?: OperationOpts): Observable<AjaxResponse<SessionDTO>>
    loginWithoutPassword({ credentialsDTO }: LoginWithoutPasswordRequest, opts?: OperationOpts): Observable<SessionDTO | AjaxResponse<SessionDTO>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-JSC-TOKEN': this.configuration.apiKey('X-JSC-TOKEN') }), // ApiKeyAuth authentication
        };

        return this.request<SessionDTO>({
            url: '/single-use-session',
            method: 'POST',
            headers,
            body: credentialsDTO,
        }, opts?.responseOpts);
    };

}
