Index: src/Component/Search/SearchComponent.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-md/lib/Buttons/Button';\nimport CircularProgress from 'react-md/lib/Progress/CircularProgress';\nimport Autocomplete from 'react-md/lib/Autocompletes/Autocomplete';\n// noinspection TypeScriptPreferShortImport\nimport { addToastAction } from '../../Store/Action/ToastAction';\nimport { ICoreRootReducer } from '../../Store/Reducer';\nimport './SearchComponent.scss';\nimport International from '../International';\n\nexport interface ISearchComponentProps {\n  addToastAction?: typeof addToastAction;\n  autocompleteData?: string[] | number[] | { dataLabel: string, dataValue: string }[];\n  centered?: boolean;\n  focusInputOnAutocomplete?: boolean;\n  focusInputOnClear?: boolean;\n  forceNumericInput?: boolean;\n  id: string;\n  indicateSearchProgress?: boolean;\n  labelTranslationId?: string;\n  onChange?: (value: string) => void;\n  onSearch: (props: ISearchComponentProps, state: ISearchComponentState) => void;\n  placeholderTranslationId: string;\n  searchOnAutocomplete?: boolean;\n  style?: React.CSSProperties;\n  className?: string;\n  value?: string;\n  disabled?: boolean;\n}\n\nexport interface ISearchComponentState {\n  value?: string;\n  inputFocused?: boolean;\n}\n\nclass SearchComponent extends React.Component<ISearchComponentProps, ISearchComponentState> {\n  state: ISearchComponentState = { inputFocused: false };\n  static defaultProps = {\n    autocompleteData: [],\n    focusInputOnAutocomplete: false,\n    focusInputOnClear: true,\n    forceNumericInput: false,\n    searchOnAutocomplete: true,\n    value: '',\n    disabled: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {value: this.props.value ? this.props.value : ''};\n  }\n\n  handleChange = (value: string) => {\n    if (this.props.forceNumericInput) {\n      value = value\n        .toString()\n        .match(/^(\\d*)/)[0]\n        .toString();\n    }\n    if (this.props.onChange) {\n      this.props.onChange(value);\n    }\n    this.setState({value});\n  };\n\n  handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 13: /* Return */\n        this.handleSearch();\n        break;\n      case 27: /* ESC */\n        document.getElementById(this.props.id).blur();\n        break;\n      default:\n        break;\n    }\n  };\n\n  handleAutocomplete = (v) => {\n    const {searchOnAutocomplete} = this.props;\n    this.setState({value: v});\n    if (searchOnAutocomplete) {\n      this.handleSearch(v);\n    }\n  };\n\n  handleSearch = (value?: string) => {\n    value = value == undefined ? this.state.value : value;\n    if (value == '') {\n      document.getElementById(this.props.id).focus();\n      this.props.addToastAction({contentTranslationId: 'app.enterSearchValue'});\n      return;\n    }\n    this.props.onSearch(this.props, {...this.state, value});\n  };\n\n  handleClear = () => {\n    const { focusInputOnClear, id } = this.props;\n    if (focusInputOnClear) {\n      document.getElementById(`${id}-autocomplete`).focus();\n    }\n    this.setState({ value: '' });\n  };\n\n  render() {\n    const {\n      id, style, className, placeholderTranslationId, autocompleteData, indicateSearchProgress,\n      labelTranslationId, focusInputOnAutocomplete, searchOnAutocomplete, disabled\n    } = this.props;\n    const menuId = `${id}Menu`;\n    return (\n      <div\n        id={id}\n        style={style}\n        className={[\n          'search-component md-text-field-icon-container',\n          disabled ? 'search-component--disabled' : undefined,\n          this.state.inputFocused ? 'search-component--focused' : undefined,\n          className\n        ].join(' ')}>\n        <div className='icon-view-box'>\n          {\n            indicateSearchProgress\n              ? (\n                <CircularProgress\n                  id={`${id}SearchProgress`}\n                  className='search-progress'/>\n              )\n              : (\n                <Button\n                  icon\n                  className='search-component-search-btn'\n                  onClick={() => this.handleSearch()}\n                  disabled={indicateSearchProgress || disabled}>\n                  search\n                </Button>\n              )\n          }\n        </div>\n        <International>\n          {({ formatMessage }) => (\n            <Autocomplete\n              id={`${id}-autocomplete`}\n              data={autocompleteData}\n              focusInputOnAutocomplete={focusInputOnAutocomplete && !searchOnAutocomplete}\n              inputClassName={`search ${this.state.value != '' && 'search-active' || ''}`}\n              label={labelTranslationId ? formatMessage({ id: labelTranslationId }) : null}\n              menuId={menuId}\n              onAutocomplete={this.handleAutocomplete}\n              onChange={this.handleChange}\n              onKeyDown={this.handleKeyDown}\n              placeholder={placeholderTranslationId ? formatMessage({ id: placeholderTranslationId }) : null}\n              textFieldClassName={'md-text-field-icon'}\n              disabled={disabled}\n              value={this.state.value}\n              onFocus={() => this.setState({ inputFocused: true })}\n              onBlur={() => this.setState({ inputFocused: false })}\n            />\n          )}\n        </International>\n        <Button\n          icon\n          className={`clear-btn ${this.state.value != '' ? 'visible' : ''}`}\n          disabled={disabled}\n          onClick={this.handleClear}\n        >clear</Button>\n      </div>\n    );\n  }\n}\n\n// higher order components -----------------------------------------------------\nconst mapStateToProps = (\n  state: ICoreRootReducer,\n  ownProps: ISearchComponentProps\n): ISearchComponentProps => ({\n  ...state.toastReducer,\n  ...ownProps\n});\n\nconst enhance = connect(mapStateToProps, {addToastAction});\n\n// noinspection JSUnusedGlobalSymbols\nexport default enhance(SearchComponent);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Component/Search/SearchComponent.tsx	(revision bebd56711ebfbff9f13583b12e8831468a6c605b)
+++ src/Component/Search/SearchComponent.tsx	(date 1591711770969)
@@ -3,7 +3,7 @@
 import Button from 'react-md/lib/Buttons/Button';
 import CircularProgress from 'react-md/lib/Progress/CircularProgress';
 import Autocomplete from 'react-md/lib/Autocompletes/Autocomplete';
-// noinspection TypeScriptPreferShortImport
+// noinspection TypeScriptPreferShortImport,ES6PreferShortImport
 import { addToastAction } from '../../Store/Action/ToastAction';
 import { ICoreRootReducer } from '../../Store/Reducer';
 import './SearchComponent.scss';
@@ -20,6 +20,7 @@
   indicateSearchProgress?: boolean;
   labelTranslationId?: string;
   onChange?: (value: string) => void;
+  onClear?: () => void;
   onSearch: (props: ISearchComponentProps, state: ISearchComponentState) => void;
   placeholderTranslationId: string;
   searchOnAutocomplete?: boolean;
@@ -101,6 +102,9 @@
       document.getElementById(`${id}-autocomplete`).focus();
     }
     this.setState({ value: '' });
+    if (this.props.onClear) {
+      this.props.onClear();
+    }
   };
 
   render() {
