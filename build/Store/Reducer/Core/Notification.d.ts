/// <reference types="connected-react-router" />
import * as TA from 'typesafe-actions';
import * as Type from '../../../Types/Notification';
import { ActionType } from '../../../Types/Redux';
export declare type State = {
    history: Type.Notification[];
    isHistoryOpen: boolean;
};
declare const Notification: TA.Reducer<State, ActionType<{}>> & {
    handlers: Record<"notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/SET_IS_HISTORY_OPEN", (state: State, action: ActionType<{}>) => State>;
    handleAction: <TActionCreator extends (...args: any[]) => import("connected-react-router").CallHistoryMethodAction<any[]> | TA.PayloadAction<"app/INITIALZE", {
        allowRobotLogin?: boolean;
        packageJson: Record<string, unknown>;
        ForceHTTPS?: boolean;
        translations: Record<string, Record<string, string>>;
    }> | TA.EmptyAction<"app/INITIALZED"> | TA.EmptyAction<"config/LOAD"> | TA.PayloadAction<"config/LOADED", {
        config: import("../../../Types/Configuration").Configuration;
    }> | TA.EmptyAction<"config/LOAD_FAILED"> | TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language> | TA.EmptyAction<"language/INITIALIZE"> | TA.PayloadAction<"locale/SET_LOCALE", {
        locale: import("../../../Types/Country").Locale;
    }> | TA.EmptyAction<"login/OPEN"> | TA.EmptyAction<"login/CLOSE"> | TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials> | TA.EmptyAction<"login/LOGGED_IN"> | TA.EmptyAction<"login/LOGIN_FAILED"> | TA.EmptyAction<"logout/OPEN"> | TA.EmptyAction<"logout/CLOSE"> | TA.EmptyAction<"logout/FINISHED"> | TA.EmptyAction<"navigation/OPEN"> | TA.EmptyAction<"navigation/CLOSE"> | TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>> | TA.EmptyAction<"route/ENTER_AUTHORIZED"> | TA.EmptyAction<"route/ENTER_UNAUTHORIZED"> | TA.EmptyAction<"session/LOAD"> | TA.EmptyAction<"route/CHECK"> | TA.PayloadAction<"route/LOGOUT", {
        sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
    }> | TA.PayloadAction<"route/AUTHORIZE", {
        frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
    }> | TA.EmptyAction<"route/UNAUTHORIZE"> | TA.EmptyAction<"settings/OPEN"> | TA.EmptyAction<"settings/CLOSE"> | TA.PayloadAction<"region/LOADED", {
        regionName: string;
    }> | TA.EmptyAction<"region/GET_FAILED"> | TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast> | TA.EmptyAction<"toast/DELETE"> | TA.PayloadAction<"websocket/ADD_NAMESPACE", string> | TA.PayloadAction<"websocket/CONNECT_REQUEST", string> | TA.PayloadAction<"websocket/CONNECT_SUCCESS", string> | TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError> | TA.PayloadAction<"websocket/PREPARE_RECONNECT", string> | TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string> | TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string> | TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> | TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection> | TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection> | TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection> | TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> | TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>> | TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, THandledAction> | Exclude<TA.PayloadAction<"app/INITIALZE", {
        allowRobotLogin?: boolean;
        packageJson: Record<string, unknown>;
        ForceHTTPS?: boolean;
        translations: Record<string, Record<string, string>>;
    }>, THandledAction> | Exclude<TA.EmptyAction<"app/INITIALZED">, THandledAction> | Exclude<TA.EmptyAction<"config/LOAD">, THandledAction> | Exclude<TA.PayloadAction<"config/LOADED", {
        config: import("../../../Types/Configuration").Configuration;
    }>, THandledAction> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, THandledAction> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, THandledAction> | Exclude<TA.EmptyAction<"language/INITIALIZE">, THandledAction> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
        locale: import("../../../Types/Country").Locale;
    }>, THandledAction> | Exclude<TA.EmptyAction<"login/OPEN">, THandledAction> | Exclude<TA.EmptyAction<"login/CLOSE">, THandledAction> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, THandledAction> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, THandledAction> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, THandledAction> | Exclude<TA.EmptyAction<"logout/OPEN">, THandledAction> | Exclude<TA.EmptyAction<"logout/CLOSE">, THandledAction> | Exclude<TA.EmptyAction<"logout/FINISHED">, THandledAction> | Exclude<TA.EmptyAction<"navigation/OPEN">, THandledAction> | Exclude<TA.EmptyAction<"navigation/CLOSE">, THandledAction> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, THandledAction> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, THandledAction> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, THandledAction> | Exclude<TA.EmptyAction<"session/LOAD">, THandledAction> | Exclude<TA.EmptyAction<"route/CHECK">, THandledAction> | Exclude<TA.PayloadAction<"route/LOGOUT", {
        sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
    }>, THandledAction> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
        frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
    }>, THandledAction> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, THandledAction> | Exclude<TA.EmptyAction<"settings/OPEN">, THandledAction> | Exclude<TA.EmptyAction<"settings/CLOSE">, THandledAction> | Exclude<TA.PayloadAction<"region/LOADED", {
        regionName: string;
    }>, THandledAction> | Exclude<TA.EmptyAction<"region/GET_FAILED">, THandledAction> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, THandledAction> | Exclude<TA.EmptyAction<"toast/DELETE">, THandledAction> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, THandledAction> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, THandledAction> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, THandledAction> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, THandledAction> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, THandledAction> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, THandledAction> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, THandledAction> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, THandledAction> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, THandledAction> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, THandledAction> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, THandledAction> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, THandledAction> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, THandledAction> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, THandledAction>>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: State, action: THandledAction) => State) => [TOutputAction] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & {
        handlers: Record<(Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TOutputAction> | Exclude<TA.PayloadAction<"app/INITIALZE", {
            allowRobotLogin?: boolean;
            packageJson: Record<string, unknown>;
            ForceHTTPS?: boolean;
            translations: Record<string, Record<string, string>>;
        }>, TOutputAction> | Exclude<TA.EmptyAction<"app/INITIALZED">, TOutputAction> | Exclude<TA.EmptyAction<"config/LOAD">, TOutputAction> | Exclude<TA.PayloadAction<"config/LOADED", {
            config: import("../../../Types/Configuration").Configuration;
        }>, TOutputAction> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, TOutputAction> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction> | Exclude<TA.EmptyAction<"language/INITIALIZE">, TOutputAction> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
            locale: import("../../../Types/Country").Locale;
        }>, TOutputAction> | Exclude<TA.EmptyAction<"login/OPEN">, TOutputAction> | Exclude<TA.EmptyAction<"login/CLOSE">, TOutputAction> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, TOutputAction> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, TOutputAction> | Exclude<TA.EmptyAction<"logout/OPEN">, TOutputAction> | Exclude<TA.EmptyAction<"logout/CLOSE">, TOutputAction> | Exclude<TA.EmptyAction<"logout/FINISHED">, TOutputAction> | Exclude<TA.EmptyAction<"navigation/OPEN">, TOutputAction> | Exclude<TA.EmptyAction<"navigation/CLOSE">, TOutputAction> | Exclude<TA.PayloadAction<"notification/ADD", Type.Notification>, TOutputAction> | Exclude<TA.PayloadAction<"notification/REMOVE", string>, TOutputAction> | Exclude<TA.PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction> | Exclude<TA.EmptyAction<"notification/REMOVE_ALL">, TOutputAction> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, TOutputAction> | Exclude<TA.PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction> | Exclude<TA.EmptyAction<"session/LOAD">, TOutputAction> | Exclude<TA.EmptyAction<"route/CHECK">, TOutputAction> | Exclude<TA.PayloadAction<"route/LOGOUT", {
            sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
        }>, TOutputAction> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
            frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
        }>, TOutputAction> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, TOutputAction> | Exclude<TA.EmptyAction<"settings/OPEN">, TOutputAction> | Exclude<TA.EmptyAction<"settings/CLOSE">, TOutputAction> | Exclude<TA.PayloadAction<"region/LOADED", {
            regionName: string;
        }>, TOutputAction> | Exclude<TA.EmptyAction<"region/GET_FAILED">, TOutputAction> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction> | Exclude<TA.EmptyAction<"toast/DELETE">, TOutputAction> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction>)["type"], (state: State, action: ActionType<{}>) => State>;
        handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: State, action: THandledAction_1) => State) => [TOutputAction_1] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & {
            handlers: Record<(Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TOutputAction_1> | Exclude<TA.PayloadAction<"app/INITIALZE", {
                allowRobotLogin?: boolean;
                packageJson: Record<string, unknown>;
                ForceHTTPS?: boolean;
                translations: Record<string, Record<string, string>>;
            }>, TOutputAction_1> | Exclude<TA.EmptyAction<"app/INITIALZED">, TOutputAction_1> | Exclude<TA.EmptyAction<"config/LOAD">, TOutputAction_1> | Exclude<TA.PayloadAction<"config/LOADED", {
                config: import("../../../Types/Configuration").Configuration;
            }>, TOutputAction_1> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, TOutputAction_1> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_1> | Exclude<TA.EmptyAction<"language/INITIALIZE">, TOutputAction_1> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
                locale: import("../../../Types/Country").Locale;
            }>, TOutputAction_1> | Exclude<TA.EmptyAction<"login/OPEN">, TOutputAction_1> | Exclude<TA.EmptyAction<"login/CLOSE">, TOutputAction_1> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_1> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, TOutputAction_1> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, TOutputAction_1> | Exclude<TA.EmptyAction<"logout/OPEN">, TOutputAction_1> | Exclude<TA.EmptyAction<"logout/CLOSE">, TOutputAction_1> | Exclude<TA.EmptyAction<"logout/FINISHED">, TOutputAction_1> | Exclude<TA.EmptyAction<"navigation/OPEN">, TOutputAction_1> | Exclude<TA.EmptyAction<"navigation/CLOSE">, TOutputAction_1> | Exclude<TA.PayloadAction<"notification/ADD", Type.Notification>, TOutputAction_1> | Exclude<TA.PayloadAction<"notification/REMOVE", string>, TOutputAction_1> | Exclude<TA.PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_1> | Exclude<TA.EmptyAction<"notification/REMOVE_ALL">, TOutputAction_1> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, TOutputAction_1> | Exclude<TA.PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_1> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_1> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_1> | Exclude<TA.EmptyAction<"session/LOAD">, TOutputAction_1> | Exclude<TA.EmptyAction<"route/CHECK">, TOutputAction_1> | Exclude<TA.PayloadAction<"route/LOGOUT", {
                sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
            }>, TOutputAction_1> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
                frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
            }>, TOutputAction_1> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, TOutputAction_1> | Exclude<TA.EmptyAction<"settings/OPEN">, TOutputAction_1> | Exclude<TA.EmptyAction<"settings/CLOSE">, TOutputAction_1> | Exclude<TA.PayloadAction<"region/LOADED", {
                regionName: string;
            }>, TOutputAction_1> | Exclude<TA.EmptyAction<"region/GET_FAILED">, TOutputAction_1> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_1> | Exclude<TA.EmptyAction<"toast/DELETE">, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_1> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_1>)["type"], (state: State, action: ActionType<{}>) => State>;
            handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: State, action: THandledAction_2) => State) => [TOutputAction_2] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & {
                handlers: Record<(Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TOutputAction_2> | Exclude<TA.PayloadAction<"app/INITIALZE", {
                    allowRobotLogin?: boolean;
                    packageJson: Record<string, unknown>;
                    ForceHTTPS?: boolean;
                    translations: Record<string, Record<string, string>>;
                }>, TOutputAction_2> | Exclude<TA.EmptyAction<"app/INITIALZED">, TOutputAction_2> | Exclude<TA.EmptyAction<"config/LOAD">, TOutputAction_2> | Exclude<TA.PayloadAction<"config/LOADED", {
                    config: import("../../../Types/Configuration").Configuration;
                }>, TOutputAction_2> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, TOutputAction_2> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_2> | Exclude<TA.EmptyAction<"language/INITIALIZE">, TOutputAction_2> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
                    locale: import("../../../Types/Country").Locale;
                }>, TOutputAction_2> | Exclude<TA.EmptyAction<"login/OPEN">, TOutputAction_2> | Exclude<TA.EmptyAction<"login/CLOSE">, TOutputAction_2> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_2> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, TOutputAction_2> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, TOutputAction_2> | Exclude<TA.EmptyAction<"logout/OPEN">, TOutputAction_2> | Exclude<TA.EmptyAction<"logout/CLOSE">, TOutputAction_2> | Exclude<TA.EmptyAction<"logout/FINISHED">, TOutputAction_2> | Exclude<TA.EmptyAction<"navigation/OPEN">, TOutputAction_2> | Exclude<TA.EmptyAction<"navigation/CLOSE">, TOutputAction_2> | Exclude<TA.PayloadAction<"notification/ADD", Type.Notification>, TOutputAction_2> | Exclude<TA.PayloadAction<"notification/REMOVE", string>, TOutputAction_2> | Exclude<TA.PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_2> | Exclude<TA.EmptyAction<"notification/REMOVE_ALL">, TOutputAction_2> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, TOutputAction_2> | Exclude<TA.PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_2> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_2> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_2> | Exclude<TA.EmptyAction<"session/LOAD">, TOutputAction_2> | Exclude<TA.EmptyAction<"route/CHECK">, TOutputAction_2> | Exclude<TA.PayloadAction<"route/LOGOUT", {
                    sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                }>, TOutputAction_2> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
                    frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                }>, TOutputAction_2> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, TOutputAction_2> | Exclude<TA.EmptyAction<"settings/OPEN">, TOutputAction_2> | Exclude<TA.EmptyAction<"settings/CLOSE">, TOutputAction_2> | Exclude<TA.PayloadAction<"region/LOADED", {
                    regionName: string;
                }>, TOutputAction_2> | Exclude<TA.EmptyAction<"region/GET_FAILED">, TOutputAction_2> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_2> | Exclude<TA.EmptyAction<"toast/DELETE">, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_2> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_2>)["type"], (state: State, action: ActionType<{}>) => State>;
                handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: State, action: THandledAction_3) => State) => [TOutputAction_3] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & {
                    handlers: Record<(Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TOutputAction_3> | Exclude<TA.PayloadAction<"app/INITIALZE", {
                        allowRobotLogin?: boolean;
                        packageJson: Record<string, unknown>;
                        ForceHTTPS?: boolean;
                        translations: Record<string, Record<string, string>>;
                    }>, TOutputAction_3> | Exclude<TA.EmptyAction<"app/INITIALZED">, TOutputAction_3> | Exclude<TA.EmptyAction<"config/LOAD">, TOutputAction_3> | Exclude<TA.PayloadAction<"config/LOADED", {
                        config: import("../../../Types/Configuration").Configuration;
                    }>, TOutputAction_3> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, TOutputAction_3> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_3> | Exclude<TA.EmptyAction<"language/INITIALIZE">, TOutputAction_3> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
                        locale: import("../../../Types/Country").Locale;
                    }>, TOutputAction_3> | Exclude<TA.EmptyAction<"login/OPEN">, TOutputAction_3> | Exclude<TA.EmptyAction<"login/CLOSE">, TOutputAction_3> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_3> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, TOutputAction_3> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, TOutputAction_3> | Exclude<TA.EmptyAction<"logout/OPEN">, TOutputAction_3> | Exclude<TA.EmptyAction<"logout/CLOSE">, TOutputAction_3> | Exclude<TA.EmptyAction<"logout/FINISHED">, TOutputAction_3> | Exclude<TA.EmptyAction<"navigation/OPEN">, TOutputAction_3> | Exclude<TA.EmptyAction<"navigation/CLOSE">, TOutputAction_3> | Exclude<TA.PayloadAction<"notification/ADD", Type.Notification>, TOutputAction_3> | Exclude<TA.PayloadAction<"notification/REMOVE", string>, TOutputAction_3> | Exclude<TA.PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_3> | Exclude<TA.EmptyAction<"notification/REMOVE_ALL">, TOutputAction_3> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, TOutputAction_3> | Exclude<TA.PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_3> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_3> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_3> | Exclude<TA.EmptyAction<"session/LOAD">, TOutputAction_3> | Exclude<TA.EmptyAction<"route/CHECK">, TOutputAction_3> | Exclude<TA.PayloadAction<"route/LOGOUT", {
                        sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                    }>, TOutputAction_3> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
                        frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                    }>, TOutputAction_3> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, TOutputAction_3> | Exclude<TA.EmptyAction<"settings/OPEN">, TOutputAction_3> | Exclude<TA.EmptyAction<"settings/CLOSE">, TOutputAction_3> | Exclude<TA.PayloadAction<"region/LOADED", {
                        regionName: string;
                    }>, TOutputAction_3> | Exclude<TA.EmptyAction<"region/GET_FAILED">, TOutputAction_3> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_3> | Exclude<TA.EmptyAction<"toast/DELETE">, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_3> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_3>)["type"], (state: State, action: ActionType<{}>) => State>;
                    handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: State, action: THandledAction_4) => State) => [TOutputAction_4] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & {
                        handlers: Record<(Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TOutputAction_4> | Exclude<TA.PayloadAction<"app/INITIALZE", {
                            allowRobotLogin?: boolean;
                            packageJson: Record<string, unknown>;
                            ForceHTTPS?: boolean;
                            translations: Record<string, Record<string, string>>;
                        }>, TOutputAction_4> | Exclude<TA.EmptyAction<"app/INITIALZED">, TOutputAction_4> | Exclude<TA.EmptyAction<"config/LOAD">, TOutputAction_4> | Exclude<TA.PayloadAction<"config/LOADED", {
                            config: import("../../../Types/Configuration").Configuration;
                        }>, TOutputAction_4> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, TOutputAction_4> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_4> | Exclude<TA.EmptyAction<"language/INITIALIZE">, TOutputAction_4> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
                            locale: import("../../../Types/Country").Locale;
                        }>, TOutputAction_4> | Exclude<TA.EmptyAction<"login/OPEN">, TOutputAction_4> | Exclude<TA.EmptyAction<"login/CLOSE">, TOutputAction_4> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_4> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, TOutputAction_4> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, TOutputAction_4> | Exclude<TA.EmptyAction<"logout/OPEN">, TOutputAction_4> | Exclude<TA.EmptyAction<"logout/CLOSE">, TOutputAction_4> | Exclude<TA.EmptyAction<"logout/FINISHED">, TOutputAction_4> | Exclude<TA.EmptyAction<"navigation/OPEN">, TOutputAction_4> | Exclude<TA.EmptyAction<"navigation/CLOSE">, TOutputAction_4> | Exclude<TA.PayloadAction<"notification/ADD", Type.Notification>, TOutputAction_4> | Exclude<TA.PayloadAction<"notification/REMOVE", string>, TOutputAction_4> | Exclude<TA.PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_4> | Exclude<TA.EmptyAction<"notification/REMOVE_ALL">, TOutputAction_4> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, TOutputAction_4> | Exclude<TA.PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_4> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_4> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_4> | Exclude<TA.EmptyAction<"session/LOAD">, TOutputAction_4> | Exclude<TA.EmptyAction<"route/CHECK">, TOutputAction_4> | Exclude<TA.PayloadAction<"route/LOGOUT", {
                            sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                        }>, TOutputAction_4> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
                            frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                        }>, TOutputAction_4> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, TOutputAction_4> | Exclude<TA.EmptyAction<"settings/OPEN">, TOutputAction_4> | Exclude<TA.EmptyAction<"settings/CLOSE">, TOutputAction_4> | Exclude<TA.PayloadAction<"region/LOADED", {
                            regionName: string;
                        }>, TOutputAction_4> | Exclude<TA.EmptyAction<"region/GET_FAILED">, TOutputAction_4> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_4> | Exclude<TA.EmptyAction<"toast/DELETE">, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_4> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_4>)["type"], (state: State, action: ActionType<{}>) => State>;
                        handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: State, action: THandledAction_5) => State) => [TOutputAction_5] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & {
                            handlers: Record<(Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TOutputAction_5> | Exclude<TA.PayloadAction<"app/INITIALZE", {
                                allowRobotLogin?: boolean;
                                packageJson: Record<string, unknown>;
                                ForceHTTPS?: boolean;
                                translations: Record<string, Record<string, string>>;
                            }>, TOutputAction_5> | Exclude<TA.EmptyAction<"app/INITIALZED">, TOutputAction_5> | Exclude<TA.EmptyAction<"config/LOAD">, TOutputAction_5> | Exclude<TA.PayloadAction<"config/LOADED", {
                                config: import("../../../Types/Configuration").Configuration;
                            }>, TOutputAction_5> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, TOutputAction_5> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_5> | Exclude<TA.EmptyAction<"language/INITIALIZE">, TOutputAction_5> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
                                locale: import("../../../Types/Country").Locale;
                            }>, TOutputAction_5> | Exclude<TA.EmptyAction<"login/OPEN">, TOutputAction_5> | Exclude<TA.EmptyAction<"login/CLOSE">, TOutputAction_5> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_5> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, TOutputAction_5> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, TOutputAction_5> | Exclude<TA.EmptyAction<"logout/OPEN">, TOutputAction_5> | Exclude<TA.EmptyAction<"logout/CLOSE">, TOutputAction_5> | Exclude<TA.EmptyAction<"logout/FINISHED">, TOutputAction_5> | Exclude<TA.EmptyAction<"navigation/OPEN">, TOutputAction_5> | Exclude<TA.EmptyAction<"navigation/CLOSE">, TOutputAction_5> | Exclude<TA.PayloadAction<"notification/ADD", Type.Notification>, TOutputAction_5> | Exclude<TA.PayloadAction<"notification/REMOVE", string>, TOutputAction_5> | Exclude<TA.PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_5> | Exclude<TA.EmptyAction<"notification/REMOVE_ALL">, TOutputAction_5> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, TOutputAction_5> | Exclude<TA.PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_5> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_5> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_5> | Exclude<TA.EmptyAction<"session/LOAD">, TOutputAction_5> | Exclude<TA.EmptyAction<"route/CHECK">, TOutputAction_5> | Exclude<TA.PayloadAction<"route/LOGOUT", {
                                sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                            }>, TOutputAction_5> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
                                frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                            }>, TOutputAction_5> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, TOutputAction_5> | Exclude<TA.EmptyAction<"settings/OPEN">, TOutputAction_5> | Exclude<TA.EmptyAction<"settings/CLOSE">, TOutputAction_5> | Exclude<TA.PayloadAction<"region/LOADED", {
                                regionName: string;
                            }>, TOutputAction_5> | Exclude<TA.EmptyAction<"region/GET_FAILED">, TOutputAction_5> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_5> | Exclude<TA.EmptyAction<"toast/DELETE">, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_5> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_5>)["type"], (state: State, action: ActionType<{}>) => State>;
                            handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: State, action: THandledAction_6) => State) => [TOutputAction_6] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & {
                                handlers: Record<(Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TOutputAction_6> | Exclude<TA.PayloadAction<"app/INITIALZE", {
                                    allowRobotLogin?: boolean;
                                    packageJson: Record<string, unknown>;
                                    ForceHTTPS?: boolean;
                                    translations: Record<string, Record<string, string>>;
                                }>, TOutputAction_6> | Exclude<TA.EmptyAction<"app/INITIALZED">, TOutputAction_6> | Exclude<TA.EmptyAction<"config/LOAD">, TOutputAction_6> | Exclude<TA.PayloadAction<"config/LOADED", {
                                    config: import("../../../Types/Configuration").Configuration;
                                }>, TOutputAction_6> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, TOutputAction_6> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_6> | Exclude<TA.EmptyAction<"language/INITIALIZE">, TOutputAction_6> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
                                    locale: import("../../../Types/Country").Locale;
                                }>, TOutputAction_6> | Exclude<TA.EmptyAction<"login/OPEN">, TOutputAction_6> | Exclude<TA.EmptyAction<"login/CLOSE">, TOutputAction_6> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_6> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, TOutputAction_6> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, TOutputAction_6> | Exclude<TA.EmptyAction<"logout/OPEN">, TOutputAction_6> | Exclude<TA.EmptyAction<"logout/CLOSE">, TOutputAction_6> | Exclude<TA.EmptyAction<"logout/FINISHED">, TOutputAction_6> | Exclude<TA.EmptyAction<"navigation/OPEN">, TOutputAction_6> | Exclude<TA.EmptyAction<"navigation/CLOSE">, TOutputAction_6> | Exclude<TA.PayloadAction<"notification/ADD", Type.Notification>, TOutputAction_6> | Exclude<TA.PayloadAction<"notification/REMOVE", string>, TOutputAction_6> | Exclude<TA.PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_6> | Exclude<TA.EmptyAction<"notification/REMOVE_ALL">, TOutputAction_6> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, TOutputAction_6> | Exclude<TA.PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_6> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_6> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_6> | Exclude<TA.EmptyAction<"session/LOAD">, TOutputAction_6> | Exclude<TA.EmptyAction<"route/CHECK">, TOutputAction_6> | Exclude<TA.PayloadAction<"route/LOGOUT", {
                                    sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                                }>, TOutputAction_6> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
                                    frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                                }>, TOutputAction_6> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, TOutputAction_6> | Exclude<TA.EmptyAction<"settings/OPEN">, TOutputAction_6> | Exclude<TA.EmptyAction<"settings/CLOSE">, TOutputAction_6> | Exclude<TA.PayloadAction<"region/LOADED", {
                                    regionName: string;
                                }>, TOutputAction_6> | Exclude<TA.EmptyAction<"region/GET_FAILED">, TOutputAction_6> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_6> | Exclude<TA.EmptyAction<"toast/DELETE">, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_6> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_6>)["type"], (state: State, action: ActionType<{}>) => State>;
                                handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: State, action: THandledAction_7) => State) => [TOutputAction_7] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & {
                                    handlers: Record<(Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TOutputAction_7> | Exclude<TA.PayloadAction<"app/INITIALZE", {
                                        allowRobotLogin?: boolean;
                                        packageJson: Record<string, unknown>;
                                        ForceHTTPS?: boolean;
                                        translations: Record<string, Record<string, string>>;
                                    }>, TOutputAction_7> | Exclude<TA.EmptyAction<"app/INITIALZED">, TOutputAction_7> | Exclude<TA.EmptyAction<"config/LOAD">, TOutputAction_7> | Exclude<TA.PayloadAction<"config/LOADED", {
                                        config: import("../../../Types/Configuration").Configuration;
                                    }>, TOutputAction_7> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, TOutputAction_7> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_7> | Exclude<TA.EmptyAction<"language/INITIALIZE">, TOutputAction_7> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
                                        locale: import("../../../Types/Country").Locale;
                                    }>, TOutputAction_7> | Exclude<TA.EmptyAction<"login/OPEN">, TOutputAction_7> | Exclude<TA.EmptyAction<"login/CLOSE">, TOutputAction_7> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_7> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, TOutputAction_7> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, TOutputAction_7> | Exclude<TA.EmptyAction<"logout/OPEN">, TOutputAction_7> | Exclude<TA.EmptyAction<"logout/CLOSE">, TOutputAction_7> | Exclude<TA.EmptyAction<"logout/FINISHED">, TOutputAction_7> | Exclude<TA.EmptyAction<"navigation/OPEN">, TOutputAction_7> | Exclude<TA.EmptyAction<"navigation/CLOSE">, TOutputAction_7> | Exclude<TA.PayloadAction<"notification/ADD", Type.Notification>, TOutputAction_7> | Exclude<TA.PayloadAction<"notification/REMOVE", string>, TOutputAction_7> | Exclude<TA.PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_7> | Exclude<TA.EmptyAction<"notification/REMOVE_ALL">, TOutputAction_7> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, TOutputAction_7> | Exclude<TA.PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_7> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_7> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_7> | Exclude<TA.EmptyAction<"session/LOAD">, TOutputAction_7> | Exclude<TA.EmptyAction<"route/CHECK">, TOutputAction_7> | Exclude<TA.PayloadAction<"route/LOGOUT", {
                                        sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                                    }>, TOutputAction_7> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
                                        frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                                    }>, TOutputAction_7> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, TOutputAction_7> | Exclude<TA.EmptyAction<"settings/OPEN">, TOutputAction_7> | Exclude<TA.EmptyAction<"settings/CLOSE">, TOutputAction_7> | Exclude<TA.PayloadAction<"region/LOADED", {
                                        regionName: string;
                                    }>, TOutputAction_7> | Exclude<TA.EmptyAction<"region/GET_FAILED">, TOutputAction_7> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_7> | Exclude<TA.EmptyAction<"toast/DELETE">, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_7> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_7>)["type"], (state: State, action: ActionType<{}>) => State>;
                                    handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: State, action: THandledAction_8) => State) => [TOutputAction_8] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & {
                                        handlers: Record<(Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TOutputAction_8> | Exclude<TA.PayloadAction<"app/INITIALZE", {
                                            allowRobotLogin?: boolean;
                                            packageJson: Record<string, unknown>;
                                            ForceHTTPS?: boolean;
                                            translations: Record<string, Record<string, string>>;
                                        }>, TOutputAction_8> | Exclude<TA.EmptyAction<"app/INITIALZED">, TOutputAction_8> | Exclude<TA.EmptyAction<"config/LOAD">, TOutputAction_8> | Exclude<TA.PayloadAction<"config/LOADED", {
                                            config: import("../../../Types/Configuration").Configuration;
                                        }>, TOutputAction_8> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, TOutputAction_8> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_8> | Exclude<TA.EmptyAction<"language/INITIALIZE">, TOutputAction_8> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
                                            locale: import("../../../Types/Country").Locale;
                                        }>, TOutputAction_8> | Exclude<TA.EmptyAction<"login/OPEN">, TOutputAction_8> | Exclude<TA.EmptyAction<"login/CLOSE">, TOutputAction_8> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_8> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, TOutputAction_8> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, TOutputAction_8> | Exclude<TA.EmptyAction<"logout/OPEN">, TOutputAction_8> | Exclude<TA.EmptyAction<"logout/CLOSE">, TOutputAction_8> | Exclude<TA.EmptyAction<"logout/FINISHED">, TOutputAction_8> | Exclude<TA.EmptyAction<"navigation/OPEN">, TOutputAction_8> | Exclude<TA.EmptyAction<"navigation/CLOSE">, TOutputAction_8> | Exclude<TA.PayloadAction<"notification/ADD", Type.Notification>, TOutputAction_8> | Exclude<TA.PayloadAction<"notification/REMOVE", string>, TOutputAction_8> | Exclude<TA.PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_8> | Exclude<TA.EmptyAction<"notification/REMOVE_ALL">, TOutputAction_8> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, TOutputAction_8> | Exclude<TA.PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_8> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_8> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_8> | Exclude<TA.EmptyAction<"session/LOAD">, TOutputAction_8> | Exclude<TA.EmptyAction<"route/CHECK">, TOutputAction_8> | Exclude<TA.PayloadAction<"route/LOGOUT", {
                                            sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                                        }>, TOutputAction_8> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
                                            frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                                        }>, TOutputAction_8> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, TOutputAction_8> | Exclude<TA.EmptyAction<"settings/OPEN">, TOutputAction_8> | Exclude<TA.EmptyAction<"settings/CLOSE">, TOutputAction_8> | Exclude<TA.PayloadAction<"region/LOADED", {
                                            regionName: string;
                                        }>, TOutputAction_8> | Exclude<TA.EmptyAction<"region/GET_FAILED">, TOutputAction_8> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_8> | Exclude<TA.EmptyAction<"toast/DELETE">, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_8> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_8>)["type"], (state: State, action: ActionType<{}>) => State>;
                                        handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: State, action: THandledAction_9) => State) => [TOutputAction_9] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & {
                                            handlers: Record<(Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TOutputAction_9> | Exclude<TA.PayloadAction<"app/INITIALZE", {
                                                allowRobotLogin?: boolean;
                                                packageJson: Record<string, unknown>;
                                                ForceHTTPS?: boolean;
                                                translations: Record<string, Record<string, string>>;
                                            }>, TOutputAction_9> | Exclude<TA.EmptyAction<"app/INITIALZED">, TOutputAction_9> | Exclude<TA.EmptyAction<"config/LOAD">, TOutputAction_9> | Exclude<TA.PayloadAction<"config/LOADED", {
                                                config: import("../../../Types/Configuration").Configuration;
                                            }>, TOutputAction_9> | Exclude<TA.EmptyAction<"config/LOAD_FAILED">, TOutputAction_9> | Exclude<TA.PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_9> | Exclude<TA.EmptyAction<"language/INITIALIZE">, TOutputAction_9> | Exclude<TA.PayloadAction<"locale/SET_LOCALE", {
                                                locale: import("../../../Types/Country").Locale;
                                            }>, TOutputAction_9> | Exclude<TA.EmptyAction<"login/OPEN">, TOutputAction_9> | Exclude<TA.EmptyAction<"login/CLOSE">, TOutputAction_9> | Exclude<TA.PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_9> | Exclude<TA.EmptyAction<"login/LOGGED_IN">, TOutputAction_9> | Exclude<TA.EmptyAction<"login/LOGIN_FAILED">, TOutputAction_9> | Exclude<TA.EmptyAction<"logout/OPEN">, TOutputAction_9> | Exclude<TA.EmptyAction<"logout/CLOSE">, TOutputAction_9> | Exclude<TA.EmptyAction<"logout/FINISHED">, TOutputAction_9> | Exclude<TA.EmptyAction<"navigation/OPEN">, TOutputAction_9> | Exclude<TA.EmptyAction<"navigation/CLOSE">, TOutputAction_9> | Exclude<TA.PayloadAction<"notification/ADD", Type.Notification>, TOutputAction_9> | Exclude<TA.PayloadAction<"notification/REMOVE", string>, TOutputAction_9> | Exclude<TA.PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_9> | Exclude<TA.EmptyAction<"notification/REMOVE_ALL">, TOutputAction_9> | Exclude<TA.PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any>>, TOutputAction_9> | Exclude<TA.PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_9> | Exclude<TA.EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_9> | Exclude<TA.EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_9> | Exclude<TA.EmptyAction<"session/LOAD">, TOutputAction_9> | Exclude<TA.EmptyAction<"route/CHECK">, TOutputAction_9> | Exclude<TA.PayloadAction<"route/LOGOUT", {
                                                sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                                            }>, TOutputAction_9> | Exclude<TA.PayloadAction<"route/AUTHORIZE", {
                                                frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                                            }>, TOutputAction_9> | Exclude<TA.EmptyAction<"route/UNAUTHORIZE">, TOutputAction_9> | Exclude<TA.EmptyAction<"settings/OPEN">, TOutputAction_9> | Exclude<TA.EmptyAction<"settings/CLOSE">, TOutputAction_9> | Exclude<TA.PayloadAction<"region/LOADED", {
                                                regionName: string;
                                            }>, TOutputAction_9> | Exclude<TA.EmptyAction<"region/GET_FAILED">, TOutputAction_9> | Exclude<TA.PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_9> | Exclude<TA.EmptyAction<"toast/DELETE">, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_9> | Exclude<TA.PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_9>)["type"], (state: State, action: ActionType<{}>) => State>;
                                            handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: State, action: THandledAction_10) => State) => [TOutputAction_10] extends [TA.Action<string>] ? TA.Reducer<State, ActionType<{}>> & any : TA.Reducer<State, ActionType<{}>> & {
                                                handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
                                            };
                                        } : TA.Reducer<State, ActionType<{}>> & {
                                            handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
                                        };
                                    } : TA.Reducer<State, ActionType<{}>> & {
                                        handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
                                    };
                                } : TA.Reducer<State, ActionType<{}>> & {
                                    handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
                                };
                            } : TA.Reducer<State, ActionType<{}>> & {
                                handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
                            };
                        } : TA.Reducer<State, ActionType<{}>> & {
                            handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
                        };
                    } : TA.Reducer<State, ActionType<{}>> & {
                        handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
                    };
                } : TA.Reducer<State, ActionType<{}>> & {
                    handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
                };
            } : TA.Reducer<State, ActionType<{}>> & {
                handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
            };
        } : TA.Reducer<State, ActionType<{}>> & {
            handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
        };
    } : TA.Reducer<State, ActionType<{}>> & {
        handlers: Record<"websocket/UPDATE_ROOM" | "app/INITIALZE" | "app/INITIALZED" | "config/LOAD" | "config/LOADED" | "config/LOAD_FAILED" | "language/CHANGE" | "language/INITIALIZE" | "locale/SET_LOCALE" | "login/OPEN" | "login/CLOSE" | "login/CHECK" | "login/LOGGED_IN" | "login/LOGIN_FAILED" | "logout/OPEN" | "logout/CLOSE" | "logout/FINISHED" | "navigation/OPEN" | "navigation/CLOSE" | "notification/ADD" | "notification/REMOVE" | "notification/REMOVE_GROUP" | "notification/REMOVE_ALL" | "notification/ERROR_ADD" | "notification/SET_IS_HISTORY_OPEN" | "route/ENTER_AUTHORIZED" | "route/ENTER_UNAUTHORIZED" | "session/LOAD" | "route/CHECK" | "route/LOGOUT" | "route/AUTHORIZE" | "route/UNAUTHORIZE" | "settings/OPEN" | "settings/CLOSE" | "region/LOADED" | "region/GET_FAILED" | "toast/ADD" | "toast/DELETE" | "websocket/ADD_NAMESPACE" | "websocket/CONNECT_REQUEST" | "websocket/CONNECT_SUCCESS" | "websocket/CONNECT_FAILED" | "websocket/PREPARE_RECONNECT" | "websocket/DISCONNECT_REQUEST" | "websocket/DISCONNECT_SUCCESS" | "websocket/JOIN_ROOM_REQUEST" | "websocket/JOIN_ROOM_LOADING" | "websocket/JOIN_ROOM_SUCCESS" | "websocket/JOIN_ROOM_FAILURE" | "websocket/LEAVE_ROOM_REQUEST" | "websocket/LEAVE_ROOM_SUCCESS" | "@@router/CALL_HISTORY_METHOD", (state: State, action: ActionType<{}>) => State>;
    };
};
export default Notification;
