import { ActionType } from 'Types/Redux';
export declare type State = {
    logoutOpen: boolean;
    logoutPending: boolean;
};
declare const Logout: import("typesafe-actions").Reducer<State, ActionType<{}>> & {
    handlers: Record<never, (state: State, action: ActionType<{}>) => State>;
    handleAction: <TActionCreator extends (...args: any[]) => import("typesafe-actions").EmptyAction<string> | import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
        description: string;
        state: unknown;
    }> | import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>> | import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown> | import("typesafe-actions").PayloadAction<"app/INITIALZE", {
        allowRobotLogin?: boolean;
        packageJson: Record<string, unknown>;
        ForceHTTPS?: boolean;
        translations: Record<string, Record<string, string>>;
    }> | import("typesafe-actions").EmptyAction<"app/INITIALZED"> | import("typesafe-actions").EmptyAction<"config/LOAD"> | import("typesafe-actions").PayloadAction<"config/LOADED", {
        config: import("../../../Types/Configuration").Configuration;
    }> | import("typesafe-actions").EmptyAction<"config/LOAD_FAILED"> | import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language> | import("typesafe-actions").EmptyAction<"language/INITIALIZE"> | import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
        locale: import("../../../Types/Country").Locale;
    }> | import("typesafe-actions").EmptyAction<"login/OPEN"> | import("typesafe-actions").EmptyAction<"login/CLOSE"> | import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials> | import("typesafe-actions").EmptyAction<"login/LOGGED_IN"> | import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED"> | import("typesafe-actions").EmptyAction<"navigation/OPEN"> | import("typesafe-actions").EmptyAction<"navigation/CLOSE"> | import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification> | import("typesafe-actions").PayloadAction<"notification/REMOVE", string> | import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string> | import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL"> | import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>> | import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean> | import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED"> | import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED"> | import("typesafe-actions").EmptyAction<"session/LOAD"> | import("typesafe-actions").EmptyAction<"route/CHECK"> | import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
        frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
    }> | import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE"> | import("typesafe-actions").EmptyAction<"settings/OPEN"> | import("typesafe-actions").EmptyAction<"settings/CLOSE"> | import("typesafe-actions").PayloadAction<"region/LOADED", {
        regionName: string;
    }> | import("typesafe-actions").EmptyAction<"region/GET_FAILED"> | import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast> | import("typesafe-actions").EmptyAction<"toast/DELETE"> | import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError> | import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string> | import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string> | import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends Exclude<import("typesafe-actions").EmptyAction<string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
        description: string;
        state: unknown;
    }>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
        allowRobotLogin?: boolean;
        packageJson: Record<string, unknown>;
        ForceHTTPS?: boolean;
        translations: Record<string, Record<string, string>>;
    }>, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
        config: import("../../../Types/Configuration").Configuration;
    }>, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
        locale: import("../../../Types/Country").Locale;
    }>, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
        frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
    }>, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
        regionName: string;
    }>, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, THandledAction> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, THandledAction>>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: State, action: THandledAction) => State) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & {
        handlers: Record<(Exclude<import("typesafe-actions").EmptyAction<string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
            description: string;
            state: unknown;
        }>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
            allowRobotLogin?: boolean;
            packageJson: Record<string, unknown>;
            ForceHTTPS?: boolean;
            translations: Record<string, Record<string, string>>;
        }>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
            config: import("../../../Types/Configuration").Configuration;
        }>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
            locale: import("../../../Types/Country").Locale;
        }>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", {
            sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
        }>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
            frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
        }>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
            regionName: string;
        }>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction>)["type"], (state: State, action: ActionType<{}>) => State>;
        handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: State, action: THandledAction_1) => State) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & {
            handlers: Record<(Exclude<import("typesafe-actions").EmptyAction<string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
                description: string;
                state: unknown;
            }>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
                allowRobotLogin?: boolean;
                packageJson: Record<string, unknown>;
                ForceHTTPS?: boolean;
                translations: Record<string, Record<string, string>>;
            }>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
                config: import("../../../Types/Configuration").Configuration;
            }>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
                locale: import("../../../Types/Country").Locale;
            }>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", {
                sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
            }>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
                frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
            }>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
                regionName: string;
            }>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_1>)["type"], (state: State, action: ActionType<{}>) => State>;
            handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: State, action: THandledAction_2) => State) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                handlers: Record<(Exclude<import("typesafe-actions").EmptyAction<string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
                    description: string;
                    state: unknown;
                }>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
                    allowRobotLogin?: boolean;
                    packageJson: Record<string, unknown>;
                    ForceHTTPS?: boolean;
                    translations: Record<string, Record<string, string>>;
                }>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
                    config: import("../../../Types/Configuration").Configuration;
                }>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
                    locale: import("../../../Types/Country").Locale;
                }>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", {
                    sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                }>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
                    frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                }>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
                    regionName: string;
                }>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_2>)["type"], (state: State, action: ActionType<{}>) => State>;
                handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: State, action: THandledAction_3) => State) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").EmptyAction<string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
                        description: string;
                        state: unknown;
                    }>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
                        allowRobotLogin?: boolean;
                        packageJson: Record<string, unknown>;
                        ForceHTTPS?: boolean;
                        translations: Record<string, Record<string, string>>;
                    }>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
                        config: import("../../../Types/Configuration").Configuration;
                    }>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
                        locale: import("../../../Types/Country").Locale;
                    }>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", {
                        sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                    }>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
                        frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                    }>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
                        regionName: string;
                    }>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_3>)["type"], (state: State, action: ActionType<{}>) => State>;
                    handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: State, action: THandledAction_4) => State) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").EmptyAction<string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
                            description: string;
                            state: unknown;
                        }>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
                            allowRobotLogin?: boolean;
                            packageJson: Record<string, unknown>;
                            ForceHTTPS?: boolean;
                            translations: Record<string, Record<string, string>>;
                        }>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
                            config: import("../../../Types/Configuration").Configuration;
                        }>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
                            locale: import("../../../Types/Country").Locale;
                        }>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", {
                            sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                        }>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
                            frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                        }>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
                            regionName: string;
                        }>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_4>)["type"], (state: State, action: ActionType<{}>) => State>;
                        handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: State, action: THandledAction_5) => State) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").EmptyAction<string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
                                description: string;
                                state: unknown;
                            }>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
                                allowRobotLogin?: boolean;
                                packageJson: Record<string, unknown>;
                                ForceHTTPS?: boolean;
                                translations: Record<string, Record<string, string>>;
                            }>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
                                config: import("../../../Types/Configuration").Configuration;
                            }>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
                                locale: import("../../../Types/Country").Locale;
                            }>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", {
                                sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                            }>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
                                frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                            }>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
                                regionName: string;
                            }>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_5>)["type"], (state: State, action: ActionType<{}>) => State>;
                            handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: State, action: THandledAction_6) => State) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").EmptyAction<string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
                                    description: string;
                                    state: unknown;
                                }>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
                                    allowRobotLogin?: boolean;
                                    packageJson: Record<string, unknown>;
                                    ForceHTTPS?: boolean;
                                    translations: Record<string, Record<string, string>>;
                                }>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
                                    config: import("../../../Types/Configuration").Configuration;
                                }>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
                                    locale: import("../../../Types/Country").Locale;
                                }>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", {
                                    sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                                }>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
                                    frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                                }>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
                                    regionName: string;
                                }>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_6>)["type"], (state: State, action: ActionType<{}>) => State>;
                                handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: State, action: THandledAction_7) => State) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").EmptyAction<string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
                                        description: string;
                                        state: unknown;
                                    }>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
                                        allowRobotLogin?: boolean;
                                        packageJson: Record<string, unknown>;
                                        ForceHTTPS?: boolean;
                                        translations: Record<string, Record<string, string>>;
                                    }>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
                                        config: import("../../../Types/Configuration").Configuration;
                                    }>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
                                        locale: import("../../../Types/Country").Locale;
                                    }>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", {
                                        sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                                    }>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
                                        frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                                    }>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
                                        regionName: string;
                                    }>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_7>)["type"], (state: State, action: ActionType<{}>) => State>;
                                    handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: State, action: THandledAction_8) => State) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").EmptyAction<string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
                                            description: string;
                                            state: unknown;
                                        }>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
                                            allowRobotLogin?: boolean;
                                            packageJson: Record<string, unknown>;
                                            ForceHTTPS?: boolean;
                                            translations: Record<string, Record<string, string>>;
                                        }>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
                                            config: import("../../../Types/Configuration").Configuration;
                                        }>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
                                            locale: import("../../../Types/Country").Locale;
                                        }>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", {
                                            sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                                        }>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
                                            frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                                        }>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
                                            regionName: string;
                                        }>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_8>)["type"], (state: State, action: ActionType<{}>) => State>;
                                        handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: State, action: THandledAction_9) => State) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").EmptyAction<string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
                                                description: string;
                                                state: unknown;
                                            }>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", {
                                                allowRobotLogin?: boolean;
                                                packageJson: Record<string, unknown>;
                                                ForceHTTPS?: boolean;
                                                translations: Record<string, Record<string, string>>;
                                            }>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", {
                                                config: import("../../../Types/Configuration").Configuration;
                                            }>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
                                                locale: import("../../../Types/Country").Locale;
                                            }>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", {
                                                sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
                                            }>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
                                                frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
                                            }>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", {
                                                regionName: string;
                                            }>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, TOutputAction_9>)["type"], (state: State, action: ActionType<{}>) => State>;
                                            handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: State, action: THandledAction_10) => State) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<State, ActionType<{}>> & any : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                                                handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
                                            };
                                        } : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                                            handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
                                        };
                                    } : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                                        handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
                                    };
                                } : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                                    handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
                                };
                            } : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                                handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
                            };
                        } : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                            handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
                        };
                    } : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                        handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
                    };
                } : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                    handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
                };
            } : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
                handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
            };
        } : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
            handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
        };
    } : import("typesafe-actions").Reducer<State, ActionType<{}>> & {
        handlers: Record<string, (state: State, action: ActionType<{}>) => State>;
    };
};
export default Logout;
