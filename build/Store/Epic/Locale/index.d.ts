declare const _default: import("redux-observable").Epic<import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
    description: string;
    state: unknown;
}> | import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>> | import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown> | import("typesafe-actions").PayloadAction<"app/INITIALZE", {
    allowRobotLogin?: boolean;
    packageJson: Record<string, unknown>;
    ForceHTTPS?: boolean;
    translations: Record<string, Record<string, string>>;
}> | import("typesafe-actions").EmptyAction<"app/INITIALZED"> | import("typesafe-actions").EmptyAction<"config/LOAD"> | import("typesafe-actions").PayloadAction<"config/LOADED", {
    config: import("../../../Types/Configuration").Configuration;
}> | import("typesafe-actions").EmptyAction<"config/LOAD_FAILED"> | import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language> | import("typesafe-actions").EmptyAction<"language/INITIALIZE"> | import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
    locale: import("../../../Types/Country").Locale;
}> | import("typesafe-actions").EmptyAction<"login/OPEN"> | import("typesafe-actions").EmptyAction<"login/CLOSE"> | import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials> | import("typesafe-actions").EmptyAction<"login/LOGGED_IN"> | import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED"> | import("typesafe-actions").EmptyAction<"logout/OPEN"> | import("typesafe-actions").EmptyAction<"logout/CLOSE"> | import("typesafe-actions").EmptyAction<"logout/FINISHED"> | import("typesafe-actions").EmptyAction<"navigation/OPEN"> | import("typesafe-actions").EmptyAction<"navigation/CLOSE"> | import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification> | import("typesafe-actions").PayloadAction<"notification/REMOVE", string> | import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string> | import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL"> | import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>> | import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean> | import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED"> | import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED"> | import("typesafe-actions").EmptyAction<"session/LOAD"> | import("typesafe-actions").EmptyAction<"route/CHECK"> | import("typesafe-actions").PayloadAction<"route/LOGOUT", {
    sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
}> | import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
    frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
}> | import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE"> | import("typesafe-actions").EmptyAction<"settings/OPEN"> | import("typesafe-actions").EmptyAction<"settings/CLOSE"> | import("typesafe-actions").PayloadAction<"region/LOADED", {
    regionName: string;
}> | import("typesafe-actions").EmptyAction<"region/GET_FAILED"> | import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast> | import("typesafe-actions").EmptyAction<"toast/DELETE"> | import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError> | import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string> | import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string> | import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, import("typesafe-actions").PayloadAction<"CORE/DEBUGGer/mattermost/post", {
    description: string;
    state: unknown;
}> | import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/register", Required<Omit<import("../../../Types/Debug").Logger, "selector">>> | import("typesafe-actions").PayloadAction<"CORE/DEBUGGER/log", unknown> | import("typesafe-actions").PayloadAction<"app/INITIALZE", {
    allowRobotLogin?: boolean;
    packageJson: Record<string, unknown>;
    ForceHTTPS?: boolean;
    translations: Record<string, Record<string, string>>;
}> | import("typesafe-actions").EmptyAction<"app/INITIALZED"> | import("typesafe-actions").EmptyAction<"config/LOAD"> | import("typesafe-actions").PayloadAction<"config/LOADED", {
    config: import("../../../Types/Configuration").Configuration;
}> | import("typesafe-actions").EmptyAction<"config/LOAD_FAILED"> | import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language> | import("typesafe-actions").EmptyAction<"language/INITIALIZE"> | import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", {
    locale: import("../../../Types/Country").Locale;
}> | import("typesafe-actions").EmptyAction<"login/OPEN"> | import("typesafe-actions").EmptyAction<"login/CLOSE"> | import("typesafe-actions").PayloadAction<"login/CHECK", import("../../../Types/Login").Credentials> | import("typesafe-actions").EmptyAction<"login/LOGGED_IN"> | import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED"> | import("typesafe-actions").EmptyAction<"logout/OPEN"> | import("typesafe-actions").EmptyAction<"logout/CLOSE"> | import("typesafe-actions").EmptyAction<"logout/FINISHED"> | import("typesafe-actions").EmptyAction<"navigation/OPEN"> | import("typesafe-actions").EmptyAction<"navigation/CLOSE"> | import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification> | import("typesafe-actions").PayloadAction<"notification/REMOVE", string> | import("typesafe-actions").PayloadAction<"notification/REMOVE_GROUP", string> | import("typesafe-actions").EmptyAction<"notification/REMOVE_ALL"> | import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError<any, any>> | import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean> | import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED"> | import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED"> | import("typesafe-actions").EmptyAction<"session/LOAD"> | import("typesafe-actions").EmptyAction<"route/CHECK"> | import("typesafe-actions").PayloadAction<"route/LOGOUT", {
    sessionDTO?: import("../../../API/JSC").default.DTO.Session.ISessionDTO;
}> | import("typesafe-actions").PayloadAction<"route/AUTHORIZE", {
    frontendSessionDTO: import("../../../API/JSC").default.DTO.Session.IFrontendSessionDTO;
}> | import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE"> | import("typesafe-actions").EmptyAction<"settings/OPEN"> | import("typesafe-actions").EmptyAction<"settings/CLOSE"> | import("typesafe-actions").PayloadAction<"region/LOADED", {
    regionName: string;
}> | import("typesafe-actions").EmptyAction<"region/GET_FAILED"> | import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast> | import("typesafe-actions").EmptyAction<"toast/DELETE"> | import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError> | import("typesafe-actions").PayloadAction<"websocket/PREPARE_RECONNECT", string> | import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string> | import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<unknown>>, import("../../../Types/Redux").State<{}>, {
    intl?: () => import("react-intl").IntlShape;
    history?: import("history").History;
}>;
export default _default;
