import { PayloadAction } from 'typesafe-actions';
import { IWebSocketRoom, IWebSocketRoomConnection } from '../Reducer/Core/WebSocketConnectionReducer';
import { authorizeSession, logout } from '../Action/SessionAction';
import { INotificationContent } from '../../Types/Notification';
import { Epic } from '../../Types/Redux';
export declare const webSocketAppIsInitializedEpic: Epic;
export declare const webSocketConnectRequestEpic: Epic;
export declare const webSocketLogoutEpic: Epic;
export declare const webSocketCheckForConnectionErrorEpic: Epic;
export declare const webSocketCheckForReconnectEpic: Epic;
export declare const webSocketConnectSuccessEpic: Epic;
export declare const webSocketDisconnectRequestEpic: Epic;
export declare const webSocketJoinRoomRequestEpic: Epic;
export declare const webSocketJoinRoomLoadingEpic: Epic;
export declare const webSocketLeaveRoomRequestEpic: Epic;
declare const _default: import("redux-observable").Epic<PayloadAction<string, number> | PayloadAction<"app/INITIALZE", import("../Action").initializeApp.Payload> | import("typesafe-actions").EmptyAction<"app/INITIALZED"> | import("typesafe-actions").EmptyAction<"config/LOAD"> | PayloadAction<"config/LOADED", import("../Action").ConfigLoaded.Payload> | import("typesafe-actions").EmptyAction<"config/LOAD_FAILED"> | PayloadAction<"language/CHANGE", import("../../Types/Language").Language> | import("typesafe-actions").EmptyAction<"language/INITIALIZE"> | import("typesafe-actions").EmptyAction<"login/OPEN"> | import("typesafe-actions").EmptyAction<"login/CLOSE"> | PayloadAction<"login/UPDATE_CREDENTIALS", import("../Action").updateCredentials.Payload> | PayloadAction<"login/CHECK", import("../Action").checkLogin.Payload> | import("typesafe-actions").EmptyAction<"login/LOGGED_IN"> | import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED"> | import("typesafe-actions").EmptyAction<"logout/OPEN"> | import("typesafe-actions").EmptyAction<"logout/CLOSE"> | import("typesafe-actions").EmptyAction<"logout/BEFORE_LOGOUT_HOOK"> | import("typesafe-actions").EmptyAction<"logout/FINISHED"> | import("typesafe-actions").EmptyAction<"navigation/OPEN"> | import("typesafe-actions").EmptyAction<"navigation/CLOSE"> | PayloadAction<string, INotificationContent> | PayloadAction<string, import("../../Types/Notification").INotification> | PayloadAction<string, string> | import("typesafe-actions").EmptyAction<"notification/DELETE_ALL"> | import("typesafe-actions").EmptyAction<"notification/DELETE_NEXT"> | import("typesafe-actions").EmptyAction<"notification/drawer/TOGGLE"> | import("typesafe-actions").EmptyAction<"notification/drawer/SHOW"> | import("typesafe-actions").EmptyAction<"notification/drawer/HIDE"> | import("typesafe-actions").EmptyAction<"notification/drawer/PIN"> | import("typesafe-actions").EmptyAction<"notification/drawer/UNPIN"> | import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED"> | import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED"> | PayloadAction<string, import("../Action").RouteDetails> | import("typesafe-actions").EmptyAction<"session/LOAD"> | import("typesafe-actions").EmptyAction<"route/CHECK"> | PayloadAction<"route/LOGOUT", logout.Payload> | PayloadAction<"route/AUTHORIZE", authorizeSession.Payload> | import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE"> | import("typesafe-actions").EmptyAction<"settings/OPEN"> | import("typesafe-actions").EmptyAction<"settings/CLOSE"> | import("typesafe-actions").EmptyAction<"splitView/ENABLE"> | import("typesafe-actions").EmptyAction<"splitView/DISABLE"> | PayloadAction<"region/LOADED", import("../Action").regionLoaded.Payload> | import("typesafe-actions").EmptyAction<"region/GET_FAILED"> | PayloadAction<"toast/ADD", import("../Reducer/Core/ToastReducer").IToastConfig> | import("typesafe-actions").EmptyAction<"toast/DELETE"> | PayloadAction<"websocket/ADD_NAMESPACE", string> | PayloadAction<"websocket/CONNECT_REQUEST", string> | PayloadAction<"websocket/CONNECT_SUCCESS", string> | PayloadAction<"websocket/CONNECT_FAILED", import("../Reducer/Core/WebSocketConnectionReducer").IWebSocketError> | PayloadAction<"websocket/DISCONNECT_REQUEST", string> | PayloadAction<"websocket/DISCONNECT_SUCCESS", string> | PayloadAction<"websocket/JOIN_ROOM_REQUEST", IWebSocketRoom<string>> | PayloadAction<"websocket/JOIN_ROOM_LOADING", IWebSocketRoomConnection> | PayloadAction<"websocket/JOIN_ROOM_SUCCESS", IWebSocketRoomConnection> | PayloadAction<"websocket/JOIN_ROOM_FAILURE", IWebSocketRoomConnection> | PayloadAction<"websocket/LEAVE_ROOM_REQUEST", IWebSocketRoom<string>> | PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", IWebSocketRoom<string>> | PayloadAction<"websocket/UPDATE_ROOM", import("../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>> | PayloadAction<"locale/SET_LOCALE", import("../Action").setLocale.Payload>, PayloadAction<string, number> | PayloadAction<"app/INITIALZE", import("../Action").initializeApp.Payload> | import("typesafe-actions").EmptyAction<"app/INITIALZED"> | import("typesafe-actions").EmptyAction<"config/LOAD"> | PayloadAction<"config/LOADED", import("../Action").ConfigLoaded.Payload> | import("typesafe-actions").EmptyAction<"config/LOAD_FAILED"> | PayloadAction<"language/CHANGE", import("../../Types/Language").Language> | import("typesafe-actions").EmptyAction<"language/INITIALIZE"> | import("typesafe-actions").EmptyAction<"login/OPEN"> | import("typesafe-actions").EmptyAction<"login/CLOSE"> | PayloadAction<"login/UPDATE_CREDENTIALS", import("../Action").updateCredentials.Payload> | PayloadAction<"login/CHECK", import("../Action").checkLogin.Payload> | import("typesafe-actions").EmptyAction<"login/LOGGED_IN"> | import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED"> | import("typesafe-actions").EmptyAction<"logout/OPEN"> | import("typesafe-actions").EmptyAction<"logout/CLOSE"> | import("typesafe-actions").EmptyAction<"logout/BEFORE_LOGOUT_HOOK"> | import("typesafe-actions").EmptyAction<"logout/FINISHED"> | import("typesafe-actions").EmptyAction<"navigation/OPEN"> | import("typesafe-actions").EmptyAction<"navigation/CLOSE"> | PayloadAction<string, INotificationContent> | PayloadAction<string, import("../../Types/Notification").INotification> | PayloadAction<string, string> | import("typesafe-actions").EmptyAction<"notification/DELETE_ALL"> | import("typesafe-actions").EmptyAction<"notification/DELETE_NEXT"> | import("typesafe-actions").EmptyAction<"notification/drawer/TOGGLE"> | import("typesafe-actions").EmptyAction<"notification/drawer/SHOW"> | import("typesafe-actions").EmptyAction<"notification/drawer/HIDE"> | import("typesafe-actions").EmptyAction<"notification/drawer/PIN"> | import("typesafe-actions").EmptyAction<"notification/drawer/UNPIN"> | import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED"> | import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED"> | PayloadAction<string, import("../Action").RouteDetails> | import("typesafe-actions").EmptyAction<"session/LOAD"> | import("typesafe-actions").EmptyAction<"route/CHECK"> | PayloadAction<"route/LOGOUT", logout.Payload> | PayloadAction<"route/AUTHORIZE", authorizeSession.Payload> | import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE"> | import("typesafe-actions").EmptyAction<"settings/OPEN"> | import("typesafe-actions").EmptyAction<"settings/CLOSE"> | import("typesafe-actions").EmptyAction<"splitView/ENABLE"> | import("typesafe-actions").EmptyAction<"splitView/DISABLE"> | PayloadAction<"region/LOADED", import("../Action").regionLoaded.Payload> | import("typesafe-actions").EmptyAction<"region/GET_FAILED"> | PayloadAction<"toast/ADD", import("../Reducer/Core/ToastReducer").IToastConfig> | import("typesafe-actions").EmptyAction<"toast/DELETE"> | PayloadAction<"websocket/ADD_NAMESPACE", string> | PayloadAction<"websocket/CONNECT_REQUEST", string> | PayloadAction<"websocket/CONNECT_SUCCESS", string> | PayloadAction<"websocket/CONNECT_FAILED", import("../Reducer/Core/WebSocketConnectionReducer").IWebSocketError> | PayloadAction<"websocket/DISCONNECT_REQUEST", string> | PayloadAction<"websocket/DISCONNECT_SUCCESS", string> | PayloadAction<"websocket/JOIN_ROOM_REQUEST", IWebSocketRoom<string>> | PayloadAction<"websocket/JOIN_ROOM_LOADING", IWebSocketRoomConnection> | PayloadAction<"websocket/JOIN_ROOM_SUCCESS", IWebSocketRoomConnection> | PayloadAction<"websocket/JOIN_ROOM_FAILURE", IWebSocketRoomConnection> | PayloadAction<"websocket/LEAVE_ROOM_REQUEST", IWebSocketRoom<string>> | PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", IWebSocketRoom<string>> | PayloadAction<"websocket/UPDATE_ROOM", import("../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>> | PayloadAction<"locale/SET_LOCALE", import("../Action").setLocale.Payload>, import("../Reducer/Global").State, {}>;
export default _default;
