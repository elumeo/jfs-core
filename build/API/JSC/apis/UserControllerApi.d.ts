/**
 * OpenApi Juwelo documentation
 * Specs for microservices: SystemController,SessionController,LoginController,UserController,WebSocketController,DebugNotificationController
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: development@juwelo.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts } from '../runtime';
import type { AppliedPasswordResetDTO, CredentialsDTO, EntityAttributeAccessDTO, GroupDTO, PasswordResetDTO, PropertyDTO, UserDTO, UserRightsDTO } from '../models';
export interface CreateUserRequest {
    userDTO?: UserDTO;
}
export interface DeleteUserRequest {
    login: string;
    userDTO?: UserDTO;
}
export interface DeleteUserEntityAttributeAccessRequest {
    userName: string;
    entity: string;
    attribute: string;
    entityAttributeAccessDTO?: EntityAttributeAccessDTO;
}
export interface GetAllUsersRequest {
    filter?: string;
}
export interface GetAppPropertiesRequest {
    login: string;
    appName: string;
}
export interface GetGroupsOfUserRequest {
    login: string;
}
export interface GetUserRequest {
    login: string;
}
export interface GetUserEntityAttributeAccessesRequest {
    userName: string;
}
export interface GetUserRightsRequest {
    login: string;
    filter?: string;
}
export interface ResetPasswordRequest {
    login: string;
    passwordResetDTO?: PasswordResetDTO;
}
export interface SetPasswordRequest {
    userId: string;
    credentialsDTO?: CredentialsDTO;
}
export interface SetUserEntityAttributeAccessRequest {
    userName: string;
    entityAttributeAccessDTO?: EntityAttributeAccessDTO;
}
export interface UpdateUserRequest {
    login: string;
    userDTO?: UserDTO;
}
/**
 * no description
 */
export declare class UserControllerApi extends BaseAPI {
    /**
     * ---there is no description defined---
     * createUser
     */
    createUser({ userDTO }: CreateUserRequest): Observable<void>;
    createUser({ userDTO }: CreateUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>;
    /**
     * ---there is no description defined---
     * deleteUser
     */
    deleteUser({ login, userDTO }: DeleteUserRequest): Observable<void>;
    deleteUser({ login, userDTO }: DeleteUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>;
    /**
     * ---there is no description defined---
     * deleteUserEntityAttributeAccess
     */
    deleteUserEntityAttributeAccess({ userName, entity, attribute, entityAttributeAccessDTO }: DeleteUserEntityAttributeAccessRequest): Observable<void>;
    deleteUserEntityAttributeAccess({ userName, entity, attribute, entityAttributeAccessDTO }: DeleteUserEntityAttributeAccessRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>;
    /**
     * ---there is no description defined---
     * getAllUsers
     */
    getAllUsers({ filter }: GetAllUsersRequest): Observable<Array<UserDTO>>;
    getAllUsers({ filter }: GetAllUsersRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UserDTO>>>;
    /**
     * ---there is no description defined---
     * getAppProperties
     */
    getAppProperties({ login, appName }: GetAppPropertiesRequest): Observable<Array<PropertyDTO>>;
    getAppProperties({ login, appName }: GetAppPropertiesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PropertyDTO>>>;
    /**
     * ---there is no description defined---
     * getGroupsOfUser
     */
    getGroupsOfUser({ login }: GetGroupsOfUserRequest): Observable<Array<GroupDTO>>;
    getGroupsOfUser({ login }: GetGroupsOfUserRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<GroupDTO>>>;
    /**
     * ---there is no description defined---
     * getUser
     */
    getUser({ login }: GetUserRequest): Observable<UserDTO>;
    getUser({ login }: GetUserRequest, opts?: OperationOpts): Observable<AjaxResponse<UserDTO>>;
    /**
     * ---there is no description defined---
     * getUserEntityAttributeAccesses
     */
    getUserEntityAttributeAccesses({ userName }: GetUserEntityAttributeAccessesRequest): Observable<Array<EntityAttributeAccessDTO>>;
    getUserEntityAttributeAccesses({ userName }: GetUserEntityAttributeAccessesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<EntityAttributeAccessDTO>>>;
    /**
     * ---there is no description defined---
     * getUserRights
     */
    getUserRights({ login, filter }: GetUserRightsRequest): Observable<UserRightsDTO>;
    getUserRights({ login, filter }: GetUserRightsRequest, opts?: OperationOpts): Observable<AjaxResponse<UserRightsDTO>>;
    /**
     * ---there is no description defined---
     * resetPassword
     */
    resetPassword({ login, passwordResetDTO }: ResetPasswordRequest): Observable<AppliedPasswordResetDTO>;
    resetPassword({ login, passwordResetDTO }: ResetPasswordRequest, opts?: OperationOpts): Observable<AjaxResponse<AppliedPasswordResetDTO>>;
    /**
     * ---there is no description defined---
     * setPassword
     */
    setPassword({ userId, credentialsDTO }: SetPasswordRequest): Observable<void>;
    setPassword({ userId, credentialsDTO }: SetPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>;
    /**
     * ---there is no description defined---
     * setUserEntityAttributeAccess
     */
    setUserEntityAttributeAccess({ userName, entityAttributeAccessDTO }: SetUserEntityAttributeAccessRequest): Observable<void>;
    setUserEntityAttributeAccess({ userName, entityAttributeAccessDTO }: SetUserEntityAttributeAccessRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>;
    /**
     * ---there is no description defined---
     * updateUser
     */
    updateUser({ login, userDTO }: UpdateUserRequest): Observable<void>;
    updateUser({ login, userDTO }: UpdateUserRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>;
}
