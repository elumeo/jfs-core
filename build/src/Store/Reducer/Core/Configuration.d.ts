/// <reference types="connected-react-router" />
import * as Action from '../../../../Store/Action';
import * as Type from '../../../../Types/Configuration';
import { ActionType } from '../../../../Types/Redux';
export declare type State<T> = {
    config: T;
    pending: boolean;
    loaded: boolean;
};
declare const Configuration: import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
    handlers: Record<"config/LOAD" | "config/LOADED", (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
    handleAction: <TType extends string, TCreator extends (...args: any[]) => import("typesafe-actions").PayloadAction<string, Action.RouteDetails> | import("connected-react-router").CallHistoryMethodAction<any[]> | import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload> | import("typesafe-actions").EmptyAction<"app/INITIALZED"> | import("typesafe-actions").EmptyAction<"config/LOAD_FAILED"> | import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language> | import("typesafe-actions").EmptyAction<"language/INITIALIZE"> | import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload> | import("typesafe-actions").EmptyAction<"login/OPEN"> | import("typesafe-actions").EmptyAction<"login/CLOSE"> | import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload> | import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload> | import("typesafe-actions").EmptyAction<"login/LOGGED_IN"> | import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED"> | import("typesafe-actions").EmptyAction<"logout/OPEN"> | import("typesafe-actions").EmptyAction<"logout/CLOSE"> | import("typesafe-actions").EmptyAction<"logout/FINISHED"> | import("typesafe-actions").EmptyAction<"navigation/OPEN"> | import("typesafe-actions").EmptyAction<"navigation/CLOSE"> | import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification> | import("typesafe-actions").PayloadAction<"notification/remove", string> | import("typesafe-actions").EmptyAction<"notification/remove_all"> | import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError> | import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean> | import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED"> | import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED"> | import("typesafe-actions").EmptyAction<"session/LOAD"> | import("typesafe-actions").EmptyAction<"route/CHECK"> | import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload> | import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload> | import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE"> | import("typesafe-actions").EmptyAction<"settings/OPEN"> | import("typesafe-actions").EmptyAction<"settings/CLOSE"> | import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload> | import("typesafe-actions").EmptyAction<"region/GET_FAILED"> | import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast> | import("typesafe-actions").EmptyAction<"toast/DELETE"> | import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string> | import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError> | import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string> | import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection> | import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>> | import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction extends Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, import("typesafe-actions").Action<TType> & ReturnType<TCreator>>, TAction extends (import("typesafe-actions").PayloadAction<string, Action.RouteDetails> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<string, Action.RouteDetails> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<string, Action.RouteDetails> : never : never) | (import("connected-react-router").CallHistoryMethodAction<any[]> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("connected-react-router").CallHistoryMethodAction<any[]> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("connected-react-router").CallHistoryMethodAction<any[]> : never : never) | (import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload> : never : never) | (import("typesafe-actions").EmptyAction<"app/INITIALZED"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"app/INITIALZED"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"app/INITIALZED"> : never : never) | (import("typesafe-actions").EmptyAction<"config/LOAD_FAILED"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"config/LOAD_FAILED"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"config/LOAD_FAILED"> : never : never) | (import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language> : never : never) | (import("typesafe-actions").EmptyAction<"language/INITIALIZE"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"language/INITIALIZE"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"language/INITIALIZE"> : never : never) | (import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload> : never : never) | (import("typesafe-actions").EmptyAction<"login/OPEN"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"login/OPEN"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"login/OPEN"> : never : never) | (import("typesafe-actions").EmptyAction<"login/CLOSE"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"login/CLOSE"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"login/CLOSE"> : never : never) | (import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload> : never : never) | (import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload> : never : never) | (import("typesafe-actions").EmptyAction<"login/LOGGED_IN"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"login/LOGGED_IN"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"login/LOGGED_IN"> : never : never) | (import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED"> : never : never) | (import("typesafe-actions").EmptyAction<"logout/OPEN"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"logout/OPEN"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"logout/OPEN"> : never : never) | (import("typesafe-actions").EmptyAction<"logout/CLOSE"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"logout/CLOSE"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"logout/CLOSE"> : never : never) | (import("typesafe-actions").EmptyAction<"logout/FINISHED"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"logout/FINISHED"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"logout/FINISHED"> : never : never) | (import("typesafe-actions").EmptyAction<"navigation/OPEN"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"navigation/OPEN"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"navigation/OPEN"> : never : never) | (import("typesafe-actions").EmptyAction<"navigation/CLOSE"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"navigation/CLOSE"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"navigation/CLOSE"> : never : never) | (import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification> : never : never) | (import("typesafe-actions").PayloadAction<"notification/remove", string> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"notification/remove", string> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"notification/remove", string> : never : never) | (import("typesafe-actions").EmptyAction<"notification/remove_all"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"notification/remove_all"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"notification/remove_all"> : never : never) | (import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError> : never : never) | (import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean> : never : never) | (import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED"> : never : never) | (import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED"> : never : never) | (import("typesafe-actions").EmptyAction<"session/LOAD"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"session/LOAD"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"session/LOAD"> : never : never) | (import("typesafe-actions").EmptyAction<"route/CHECK"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"route/CHECK"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"route/CHECK"> : never : never) | (import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload> : never : never) | (import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload> : never : never) | (import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE"> : never : never) | (import("typesafe-actions").EmptyAction<"settings/OPEN"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"settings/OPEN"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"settings/OPEN"> : never : never) | (import("typesafe-actions").EmptyAction<"settings/CLOSE"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"settings/CLOSE"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"settings/CLOSE"> : never : never) | (import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload> : never : never) | (import("typesafe-actions").EmptyAction<"region/GET_FAILED"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"region/GET_FAILED"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"region/GET_FAILED"> : never : never) | (import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast> : never : never) | (import("typesafe-actions").EmptyAction<"toast/DELETE"> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"toast/DELETE"> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").EmptyAction<"toast/DELETE"> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>> : never : never) | (import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>> extends import("typesafe-actions").Action<TType> ? import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>> extends ReturnType<TCreator> ? ReturnType<TCreator> & import("typesafe-actions").Action<TType> & import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>> : never : never)>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: State<Type.Configuration>, action: TAction) => State<Type.Configuration>) => [TNextNotHandledAction] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
        handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
    } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, TNextNotHandledAction> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", Action.ConfigLoaded.Payload>, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TNextNotHandledAction> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction>)["type"], (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
        handleAction: <TType_1 extends TNextNotHandledAction["type"], TCreator_1 extends (...args: any[]) => TNextNotHandledAction, TNextNotHandledAction_1 extends Exclude<TNextNotHandledAction, import("typesafe-actions").Action<TType_1> & ReturnType<TCreator_1>>, TAction_1 extends TNextNotHandledAction extends import("typesafe-actions").Action<TType_1> ? TNextNotHandledAction extends ReturnType<TCreator_1> ? TNextNotHandledAction : never : never>(singleOrMultipleCreatorsAndTypes: TType_1 | TCreator_1 | TType_1[] | TCreator_1[], reducer: (state: State<Type.Configuration>, action: TAction_1) => State<Type.Configuration>) => [TNextNotHandledAction_1] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
            handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
        } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, TNextNotHandledAction_1> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", Action.ConfigLoaded.Payload>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_1> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction_1>)["type"], (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
            handleAction: <TType_2 extends TNextNotHandledAction_1["type"], TCreator_2 extends (...args: any[]) => TNextNotHandledAction_1, TNextNotHandledAction_2 extends Exclude<TNextNotHandledAction_1, import("typesafe-actions").Action<TType_2> & ReturnType<TCreator_2>>, TAction_2 extends TNextNotHandledAction_1 extends import("typesafe-actions").Action<TType_2> ? TNextNotHandledAction_1 extends ReturnType<TCreator_2> ? TNextNotHandledAction_1 : never : never>(singleOrMultipleCreatorsAndTypes: TType_2 | TCreator_2 | TType_2[] | TCreator_2[], reducer: (state: State<Type.Configuration>, action: TAction_2) => State<Type.Configuration>) => [TNextNotHandledAction_2] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
            } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, TNextNotHandledAction_2> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", Action.ConfigLoaded.Payload>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_2> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction_2>)["type"], (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                handleAction: <TType_3 extends TNextNotHandledAction_2["type"], TCreator_3 extends (...args: any[]) => TNextNotHandledAction_2, TNextNotHandledAction_3 extends Exclude<TNextNotHandledAction_2, import("typesafe-actions").Action<TType_3> & ReturnType<TCreator_3>>, TAction_3 extends TNextNotHandledAction_2 extends import("typesafe-actions").Action<TType_3> ? TNextNotHandledAction_2 extends ReturnType<TCreator_3> ? TNextNotHandledAction_2 : never : never>(singleOrMultipleCreatorsAndTypes: TType_3 | TCreator_3 | TType_3[] | TCreator_3[], reducer: (state: State<Type.Configuration>, action: TAction_3) => State<Type.Configuration>) => [TNextNotHandledAction_3] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                    handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, TNextNotHandledAction_3> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", Action.ConfigLoaded.Payload>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_3> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction_3>)["type"], (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                    handleAction: <TType_4 extends TNextNotHandledAction_3["type"], TCreator_4 extends (...args: any[]) => TNextNotHandledAction_3, TNextNotHandledAction_4 extends Exclude<TNextNotHandledAction_3, import("typesafe-actions").Action<TType_4> & ReturnType<TCreator_4>>, TAction_4 extends TNextNotHandledAction_3 extends import("typesafe-actions").Action<TType_4> ? TNextNotHandledAction_3 extends ReturnType<TCreator_4> ? TNextNotHandledAction_3 : never : never>(singleOrMultipleCreatorsAndTypes: TType_4 | TCreator_4 | TType_4[] | TCreator_4[], reducer: (state: State<Type.Configuration>, action: TAction_4) => State<Type.Configuration>) => [TNextNotHandledAction_4] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                        handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                    } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, TNextNotHandledAction_4> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", Action.ConfigLoaded.Payload>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_4> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction_4>)["type"], (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                        handleAction: <TType_5 extends TNextNotHandledAction_4["type"], TCreator_5 extends (...args: any[]) => TNextNotHandledAction_4, TNextNotHandledAction_5 extends Exclude<TNextNotHandledAction_4, import("typesafe-actions").Action<TType_5> & ReturnType<TCreator_5>>, TAction_5 extends TNextNotHandledAction_4 extends import("typesafe-actions").Action<TType_5> ? TNextNotHandledAction_4 extends ReturnType<TCreator_5> ? TNextNotHandledAction_4 : never : never>(singleOrMultipleCreatorsAndTypes: TType_5 | TCreator_5 | TType_5[] | TCreator_5[], reducer: (state: State<Type.Configuration>, action: TAction_5) => State<Type.Configuration>) => [TNextNotHandledAction_5] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                            handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                        } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, TNextNotHandledAction_5> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", Action.ConfigLoaded.Payload>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_5> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction_5>)["type"], (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                            handleAction: <TType_6 extends TNextNotHandledAction_5["type"], TCreator_6 extends (...args: any[]) => TNextNotHandledAction_5, TNextNotHandledAction_6 extends Exclude<TNextNotHandledAction_5, import("typesafe-actions").Action<TType_6> & ReturnType<TCreator_6>>, TAction_6 extends TNextNotHandledAction_5 extends import("typesafe-actions").Action<TType_6> ? TNextNotHandledAction_5 extends ReturnType<TCreator_6> ? TNextNotHandledAction_5 : never : never>(singleOrMultipleCreatorsAndTypes: TType_6 | TCreator_6 | TType_6[] | TCreator_6[], reducer: (state: State<Type.Configuration>, action: TAction_6) => State<Type.Configuration>) => [TNextNotHandledAction_6] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                                handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                            } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, TNextNotHandledAction_6> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", Action.ConfigLoaded.Payload>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_6> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction_6>)["type"], (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                                handleAction: <TType_7 extends TNextNotHandledAction_6["type"], TCreator_7 extends (...args: any[]) => TNextNotHandledAction_6, TNextNotHandledAction_7 extends Exclude<TNextNotHandledAction_6, import("typesafe-actions").Action<TType_7> & ReturnType<TCreator_7>>, TAction_7 extends TNextNotHandledAction_6 extends import("typesafe-actions").Action<TType_7> ? TNextNotHandledAction_6 extends ReturnType<TCreator_7> ? TNextNotHandledAction_6 : never : never>(singleOrMultipleCreatorsAndTypes: TType_7 | TCreator_7 | TType_7[] | TCreator_7[], reducer: (state: State<Type.Configuration>, action: TAction_7) => State<Type.Configuration>) => [TNextNotHandledAction_7] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                                    handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                                } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, TNextNotHandledAction_7> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", Action.ConfigLoaded.Payload>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_7> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction_7>)["type"], (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                                    handleAction: <TType_8 extends TNextNotHandledAction_7["type"], TCreator_8 extends (...args: any[]) => TNextNotHandledAction_7, TNextNotHandledAction_8 extends Exclude<TNextNotHandledAction_7, import("typesafe-actions").Action<TType_8> & ReturnType<TCreator_8>>, TAction_8 extends TNextNotHandledAction_7 extends import("typesafe-actions").Action<TType_8> ? TNextNotHandledAction_7 extends ReturnType<TCreator_8> ? TNextNotHandledAction_7 : never : never>(singleOrMultipleCreatorsAndTypes: TType_8 | TCreator_8 | TType_8[] | TCreator_8[], reducer: (state: State<Type.Configuration>, action: TAction_8) => State<Type.Configuration>) => [TNextNotHandledAction_8] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                                        handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                                    } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, TNextNotHandledAction_8> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", Action.ConfigLoaded.Payload>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_8> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction_8>)["type"], (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                                        handleAction: <TType_9 extends TNextNotHandledAction_8["type"], TCreator_9 extends (...args: any[]) => TNextNotHandledAction_8, TNextNotHandledAction_9 extends Exclude<TNextNotHandledAction_8, import("typesafe-actions").Action<TType_9> & ReturnType<TCreator_9>>, TAction_9 extends TNextNotHandledAction_8 extends import("typesafe-actions").Action<TType_9> ? TNextNotHandledAction_8 extends ReturnType<TCreator_9> ? TNextNotHandledAction_8 : never : never>(singleOrMultipleCreatorsAndTypes: TType_9 | TCreator_9 | TType_9[] | TCreator_9[], reducer: (state: State<Type.Configuration>, action: TAction_9) => State<Type.Configuration>) => [TNextNotHandledAction_9] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                                            handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                                        } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<string, Action.RouteDetails>, TNextNotHandledAction_9> | Exclude<import("connected-react-router").CallHistoryMethodAction<any[]>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"app/INITIALZE", Action.initializeApp.Payload>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"app/INITIALZED">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"config/LOADED", Action.ConfigLoaded.Payload>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"config/LOAD_FAILED">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"language/CHANGE", import("../../../Types/Language").Language>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"language/INITIALIZE">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"locale/SET_LOCALE", Action.setLocale.Payload>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"login/OPEN">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"login/CLOSE">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"login/UPDATE_CREDENTIALS", Action.updateCredentials.Payload>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"login/CHECK", Action.checkLogin.Payload>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGGED_IN">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"login/LOGIN_FAILED">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"logout/OPEN">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"logout/CLOSE">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"logout/FINISHED">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"navigation/OPEN">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"navigation/CLOSE">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"notification/ADD", import("../../../Types/Notification").Notification>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"notification/remove", string>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"notification/remove_all">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"notification/ERROR_ADD", import("axios").AxiosError>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"notification/SET_IS_HISTORY_OPEN", boolean>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_AUTHORIZED">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"route/ENTER_UNAUTHORIZED">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"session/LOAD">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"route/CHECK">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"route/LOGOUT", Action.logout.Payload>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"route/AUTHORIZE", Action.authorizeSession.Payload>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"route/UNAUTHORIZE">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"settings/OPEN">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"settings/CLOSE">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"region/LOADED", Action.regionLoaded.Payload>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"region/GET_FAILED">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"toast/ADD", import("../../../Types/Toast").Toast>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").EmptyAction<"toast/DELETE">, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/ADD_NAMESPACE", string>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_REQUEST", string>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_SUCCESS", string>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/CONNECT_FAILED", import("../../../Types/WebSocket").IWebSocketError>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_REQUEST", string>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/DISCONNECT_SUCCESS", string>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_LOADING", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/JOIN_ROOM_FAILURE", import("../../../Types/WebSocket").IWebSocketRoomConnection>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_REQUEST", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/LEAVE_ROOM_SUCCESS", import("../../../Types/WebSocket").IWebSocketRoom<string>>, TNextNotHandledAction_9> | Exclude<import("typesafe-actions").PayloadAction<"websocket/UPDATE_ROOM", import("../../../API/JSC").default.DTO.WebSocket.IWebSocketRoomUpdateDTO<any>>, TNextNotHandledAction_9>)["type"], (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                                            handleAction: <TType_10 extends TNextNotHandledAction_9["type"], TCreator_10 extends (...args: any[]) => TNextNotHandledAction_9, TNextNotHandledAction_10 extends Exclude<TNextNotHandledAction_9, import("typesafe-actions").Action<TType_10> & ReturnType<TCreator_10>>, TAction_10 extends TNextNotHandledAction_9 extends import("typesafe-actions").Action<TType_10> ? TNextNotHandledAction_9 extends ReturnType<TCreator_10> ? TNextNotHandledAction_9 : never : never>(singleOrMultipleCreatorsAndTypes: TType_10 | TCreator_10 | TType_10[] | TCreator_10[], reducer: (state: State<Type.Configuration>, action: TAction_10) => State<Type.Configuration>) => [TNextNotHandledAction_10] extends [never] ? import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & {
                                                handlers: Record<string, (state: State<Type.Configuration>, action: ActionType<{}>) => State<Type.Configuration>>;
                                            } : import("typesafe-actions").Reducer<State<Type.Configuration>, ActionType<{}>> & any;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
export default Configuration;
